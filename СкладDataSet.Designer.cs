//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Storage {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("СкладDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class СкладDataSet : global::System.Data.DataSet {
        
        private Готовая_продукцияDataTable tableГотовая_продукция;
        
        private Заказчик_ГПDataTable tableЗаказчик_ГП;
        
        private Информация_по_товарамDataTable tableИнформация_по_товарам;
        
        private Операции_по_готовой_продукцииDataTable tableОперации_по_готовой_продукции;
        
        private Операции_по_складу_ГПDataTable tableОперации_по_складу_ГП;
        
        private Операции_по_складу_СиМDataTable tableОперации_по_складу_СиМ;
        
        private Операции_по_цехуDataTable tableОперации_по_цеху;
        
        private Поставщик_СиМDataTable tableПоставщик_СиМ;
        
        private Склад_ГПDataTable tableСклад_ГП;
        
        private Склад_СиМDataTable tableСклад_СиМ;
        
        private ЦехDataTable tableЦех;
        
        private global::System.Data.DataRelation relationFK_Готовая_продукция_Цех;
        
        private global::System.Data.DataRelation relationFK_Заказчик_ГП_Склад_ГП;
        
        private global::System.Data.DataRelation relationFK_Информация_по_товарам_Склад_ГП;
        
        private global::System.Data.DataRelation relationFK_Информация_по_товарам_Склад_СиМ;
        
        private global::System.Data.DataRelation relationFK_Операции_по_готовой_продукции_Готовая_продукция;
        
        private global::System.Data.DataRelation relationFK_Операции_по_складу_ГП_Склад_ГП;
        
        private global::System.Data.DataRelation relationFK_Операции_по_складу_СиМ_Склад_СиМ;
        
        private global::System.Data.DataRelation relationFK_Операции_по_цеху_Цех;
        
        private global::System.Data.DataRelation relationFK_Поставщик_СиМ_Склад_СиМ;
        
        private global::System.Data.DataRelation relationFK_Склад_ГП_Готовая_продукция;
        
        private global::System.Data.DataRelation relationFK_Цех_Склад_СиМ1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public СкладDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected СкладDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Готовая продукция"] != null)) {
                    base.Tables.Add(new Готовая_продукцияDataTable(ds.Tables["Готовая продукция"]));
                }
                if ((ds.Tables["Заказчик ГП"] != null)) {
                    base.Tables.Add(new Заказчик_ГПDataTable(ds.Tables["Заказчик ГП"]));
                }
                if ((ds.Tables["Информация по товарам"] != null)) {
                    base.Tables.Add(new Информация_по_товарамDataTable(ds.Tables["Информация по товарам"]));
                }
                if ((ds.Tables["Операции по готовой продукции"] != null)) {
                    base.Tables.Add(new Операции_по_готовой_продукцииDataTable(ds.Tables["Операции по готовой продукции"]));
                }
                if ((ds.Tables["Операции по складу ГП"] != null)) {
                    base.Tables.Add(new Операции_по_складу_ГПDataTable(ds.Tables["Операции по складу ГП"]));
                }
                if ((ds.Tables["Операции по складу СиМ"] != null)) {
                    base.Tables.Add(new Операции_по_складу_СиМDataTable(ds.Tables["Операции по складу СиМ"]));
                }
                if ((ds.Tables["Операции по цеху"] != null)) {
                    base.Tables.Add(new Операции_по_цехуDataTable(ds.Tables["Операции по цеху"]));
                }
                if ((ds.Tables["Поставщик СиМ"] != null)) {
                    base.Tables.Add(new Поставщик_СиМDataTable(ds.Tables["Поставщик СиМ"]));
                }
                if ((ds.Tables["Склад ГП"] != null)) {
                    base.Tables.Add(new Склад_ГПDataTable(ds.Tables["Склад ГП"]));
                }
                if ((ds.Tables["Склад СиМ"] != null)) {
                    base.Tables.Add(new Склад_СиМDataTable(ds.Tables["Склад СиМ"]));
                }
                if ((ds.Tables["Цех"] != null)) {
                    base.Tables.Add(new ЦехDataTable(ds.Tables["Цех"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Готовая_продукцияDataTable Готовая_продукция {
            get {
                return this.tableГотовая_продукция;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Заказчик_ГПDataTable Заказчик_ГП {
            get {
                return this.tableЗаказчик_ГП;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Информация_по_товарамDataTable Информация_по_товарам {
            get {
                return this.tableИнформация_по_товарам;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Операции_по_готовой_продукцииDataTable Операции_по_готовой_продукции {
            get {
                return this.tableОперации_по_готовой_продукции;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Операции_по_складу_ГПDataTable Операции_по_складу_ГП {
            get {
                return this.tableОперации_по_складу_ГП;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Операции_по_складу_СиМDataTable Операции_по_складу_СиМ {
            get {
                return this.tableОперации_по_складу_СиМ;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Операции_по_цехуDataTable Операции_по_цеху {
            get {
                return this.tableОперации_по_цеху;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Поставщик_СиМDataTable Поставщик_СиМ {
            get {
                return this.tableПоставщик_СиМ;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Склад_ГПDataTable Склад_ГП {
            get {
                return this.tableСклад_ГП;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Склад_СиМDataTable Склад_СиМ {
            get {
                return this.tableСклад_СиМ;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ЦехDataTable Цех {
            get {
                return this.tableЦех;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            СкладDataSet cln = ((СкладDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Готовая продукция"] != null)) {
                    base.Tables.Add(new Готовая_продукцияDataTable(ds.Tables["Готовая продукция"]));
                }
                if ((ds.Tables["Заказчик ГП"] != null)) {
                    base.Tables.Add(new Заказчик_ГПDataTable(ds.Tables["Заказчик ГП"]));
                }
                if ((ds.Tables["Информация по товарам"] != null)) {
                    base.Tables.Add(new Информация_по_товарамDataTable(ds.Tables["Информация по товарам"]));
                }
                if ((ds.Tables["Операции по готовой продукции"] != null)) {
                    base.Tables.Add(new Операции_по_готовой_продукцииDataTable(ds.Tables["Операции по готовой продукции"]));
                }
                if ((ds.Tables["Операции по складу ГП"] != null)) {
                    base.Tables.Add(new Операции_по_складу_ГПDataTable(ds.Tables["Операции по складу ГП"]));
                }
                if ((ds.Tables["Операции по складу СиМ"] != null)) {
                    base.Tables.Add(new Операции_по_складу_СиМDataTable(ds.Tables["Операции по складу СиМ"]));
                }
                if ((ds.Tables["Операции по цеху"] != null)) {
                    base.Tables.Add(new Операции_по_цехуDataTable(ds.Tables["Операции по цеху"]));
                }
                if ((ds.Tables["Поставщик СиМ"] != null)) {
                    base.Tables.Add(new Поставщик_СиМDataTable(ds.Tables["Поставщик СиМ"]));
                }
                if ((ds.Tables["Склад ГП"] != null)) {
                    base.Tables.Add(new Склад_ГПDataTable(ds.Tables["Склад ГП"]));
                }
                if ((ds.Tables["Склад СиМ"] != null)) {
                    base.Tables.Add(new Склад_СиМDataTable(ds.Tables["Склад СиМ"]));
                }
                if ((ds.Tables["Цех"] != null)) {
                    base.Tables.Add(new ЦехDataTable(ds.Tables["Цех"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableГотовая_продукция = ((Готовая_продукцияDataTable)(base.Tables["Готовая продукция"]));
            if ((initTable == true)) {
                if ((this.tableГотовая_продукция != null)) {
                    this.tableГотовая_продукция.InitVars();
                }
            }
            this.tableЗаказчик_ГП = ((Заказчик_ГПDataTable)(base.Tables["Заказчик ГП"]));
            if ((initTable == true)) {
                if ((this.tableЗаказчик_ГП != null)) {
                    this.tableЗаказчик_ГП.InitVars();
                }
            }
            this.tableИнформация_по_товарам = ((Информация_по_товарамDataTable)(base.Tables["Информация по товарам"]));
            if ((initTable == true)) {
                if ((this.tableИнформация_по_товарам != null)) {
                    this.tableИнформация_по_товарам.InitVars();
                }
            }
            this.tableОперации_по_готовой_продукции = ((Операции_по_готовой_продукцииDataTable)(base.Tables["Операции по готовой продукции"]));
            if ((initTable == true)) {
                if ((this.tableОперации_по_готовой_продукции != null)) {
                    this.tableОперации_по_готовой_продукции.InitVars();
                }
            }
            this.tableОперации_по_складу_ГП = ((Операции_по_складу_ГПDataTable)(base.Tables["Операции по складу ГП"]));
            if ((initTable == true)) {
                if ((this.tableОперации_по_складу_ГП != null)) {
                    this.tableОперации_по_складу_ГП.InitVars();
                }
            }
            this.tableОперации_по_складу_СиМ = ((Операции_по_складу_СиМDataTable)(base.Tables["Операции по складу СиМ"]));
            if ((initTable == true)) {
                if ((this.tableОперации_по_складу_СиМ != null)) {
                    this.tableОперации_по_складу_СиМ.InitVars();
                }
            }
            this.tableОперации_по_цеху = ((Операции_по_цехуDataTable)(base.Tables["Операции по цеху"]));
            if ((initTable == true)) {
                if ((this.tableОперации_по_цеху != null)) {
                    this.tableОперации_по_цеху.InitVars();
                }
            }
            this.tableПоставщик_СиМ = ((Поставщик_СиМDataTable)(base.Tables["Поставщик СиМ"]));
            if ((initTable == true)) {
                if ((this.tableПоставщик_СиМ != null)) {
                    this.tableПоставщик_СиМ.InitVars();
                }
            }
            this.tableСклад_ГП = ((Склад_ГПDataTable)(base.Tables["Склад ГП"]));
            if ((initTable == true)) {
                if ((this.tableСклад_ГП != null)) {
                    this.tableСклад_ГП.InitVars();
                }
            }
            this.tableСклад_СиМ = ((Склад_СиМDataTable)(base.Tables["Склад СиМ"]));
            if ((initTable == true)) {
                if ((this.tableСклад_СиМ != null)) {
                    this.tableСклад_СиМ.InitVars();
                }
            }
            this.tableЦех = ((ЦехDataTable)(base.Tables["Цех"]));
            if ((initTable == true)) {
                if ((this.tableЦех != null)) {
                    this.tableЦех.InitVars();
                }
            }
            this.relationFK_Готовая_продукция_Цех = this.Relations["FK_Готовая продукция_Цех"];
            this.relationFK_Заказчик_ГП_Склад_ГП = this.Relations["FK_Заказчик ГП_Склад ГП"];
            this.relationFK_Информация_по_товарам_Склад_ГП = this.Relations["FK_Информация по товарам_Склад ГП"];
            this.relationFK_Информация_по_товарам_Склад_СиМ = this.Relations["FK_Информация по товарам_Склад СиМ"];
            this.relationFK_Операции_по_готовой_продукции_Готовая_продукция = this.Relations["FK_Операции по готовой продукции_Готовая продукция"];
            this.relationFK_Операции_по_складу_ГП_Склад_ГП = this.Relations["FK_Операции по складу ГП_Склад ГП"];
            this.relationFK_Операции_по_складу_СиМ_Склад_СиМ = this.Relations["FK_Операции по складу СиМ_Склад СиМ"];
            this.relationFK_Операции_по_цеху_Цех = this.Relations["FK_Операции по цеху_Цех"];
            this.relationFK_Поставщик_СиМ_Склад_СиМ = this.Relations["FK_Поставщик СиМ_Склад СиМ"];
            this.relationFK_Склад_ГП_Готовая_продукция = this.Relations["FK_Склад ГП_Готовая продукция"];
            this.relationFK_Цех_Склад_СиМ1 = this.Relations["FK_Цех_Склад СиМ1"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass() {
            this.DataSetName = "СкладDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/СкладDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableГотовая_продукция = new Готовая_продукцияDataTable();
            base.Tables.Add(this.tableГотовая_продукция);
            this.tableЗаказчик_ГП = new Заказчик_ГПDataTable();
            base.Tables.Add(this.tableЗаказчик_ГП);
            this.tableИнформация_по_товарам = new Информация_по_товарамDataTable();
            base.Tables.Add(this.tableИнформация_по_товарам);
            this.tableОперации_по_готовой_продукции = new Операции_по_готовой_продукцииDataTable();
            base.Tables.Add(this.tableОперации_по_готовой_продукции);
            this.tableОперации_по_складу_ГП = new Операции_по_складу_ГПDataTable();
            base.Tables.Add(this.tableОперации_по_складу_ГП);
            this.tableОперации_по_складу_СиМ = new Операции_по_складу_СиМDataTable();
            base.Tables.Add(this.tableОперации_по_складу_СиМ);
            this.tableОперации_по_цеху = new Операции_по_цехуDataTable();
            base.Tables.Add(this.tableОперации_по_цеху);
            this.tableПоставщик_СиМ = new Поставщик_СиМDataTable();
            base.Tables.Add(this.tableПоставщик_СиМ);
            this.tableСклад_ГП = new Склад_ГПDataTable();
            base.Tables.Add(this.tableСклад_ГП);
            this.tableСклад_СиМ = new Склад_СиМDataTable();
            base.Tables.Add(this.tableСклад_СиМ);
            this.tableЦех = new ЦехDataTable();
            base.Tables.Add(this.tableЦех);
            this.relationFK_Готовая_продукция_Цех = new global::System.Data.DataRelation("FK_Готовая продукция_Цех", new global::System.Data.DataColumn[] {
                        this.tableЦех.Код_сырьяColumn}, new global::System.Data.DataColumn[] {
                        this.tableГотовая_продукция.Код_сырьяColumn}, false);
            this.Relations.Add(this.relationFK_Готовая_продукция_Цех);
            this.relationFK_Заказчик_ГП_Склад_ГП = new global::System.Data.DataRelation("FK_Заказчик ГП_Склад ГП", new global::System.Data.DataColumn[] {
                        this.tableСклад_ГП.Код_товараColumn}, new global::System.Data.DataColumn[] {
                        this.tableЗаказчик_ГП.Код_товараColumn}, false);
            this.Relations.Add(this.relationFK_Заказчик_ГП_Склад_ГП);
            this.relationFK_Информация_по_товарам_Склад_ГП = new global::System.Data.DataRelation("FK_Информация по товарам_Склад ГП", new global::System.Data.DataColumn[] {
                        this.tableСклад_ГП.Код_товараColumn}, new global::System.Data.DataColumn[] {
                        this.tableИнформация_по_товарам.Код_товараColumn}, false);
            this.Relations.Add(this.relationFK_Информация_по_товарам_Склад_ГП);
            this.relationFK_Информация_по_товарам_Склад_СиМ = new global::System.Data.DataRelation("FK_Информация по товарам_Склад СиМ", new global::System.Data.DataColumn[] {
                        this.tableСклад_СиМ.Код_сырьяColumn}, new global::System.Data.DataColumn[] {
                        this.tableИнформация_по_товарам.Код_сырьяColumn}, false);
            this.Relations.Add(this.relationFK_Информация_по_товарам_Склад_СиМ);
            this.relationFK_Операции_по_готовой_продукции_Готовая_продукция = new global::System.Data.DataRelation("FK_Операции по готовой продукции_Готовая продукция", new global::System.Data.DataColumn[] {
                        this.tableГотовая_продукция.Код_товараColumn}, new global::System.Data.DataColumn[] {
                        this.tableОперации_по_готовой_продукции.Код_товараColumn}, false);
            this.Relations.Add(this.relationFK_Операции_по_готовой_продукции_Готовая_продукция);
            this.relationFK_Операции_по_складу_ГП_Склад_ГП = new global::System.Data.DataRelation("FK_Операции по складу ГП_Склад ГП", new global::System.Data.DataColumn[] {
                        this.tableСклад_ГП.Код_товараColumn}, new global::System.Data.DataColumn[] {
                        this.tableОперации_по_складу_ГП.Код_товараColumn}, false);
            this.Relations.Add(this.relationFK_Операции_по_складу_ГП_Склад_ГП);
            this.relationFK_Операции_по_складу_СиМ_Склад_СиМ = new global::System.Data.DataRelation("FK_Операции по складу СиМ_Склад СиМ", new global::System.Data.DataColumn[] {
                        this.tableСклад_СиМ.Код_сырьяColumn}, new global::System.Data.DataColumn[] {
                        this.tableОперации_по_складу_СиМ.Код_сырьяColumn}, false);
            this.Relations.Add(this.relationFK_Операции_по_складу_СиМ_Склад_СиМ);
            this.relationFK_Операции_по_цеху_Цех = new global::System.Data.DataRelation("FK_Операции по цеху_Цех", new global::System.Data.DataColumn[] {
                        this.tableЦех.Код_сырьяColumn}, new global::System.Data.DataColumn[] {
                        this.tableОперации_по_цеху.Код_сырьяColumn}, false);
            this.Relations.Add(this.relationFK_Операции_по_цеху_Цех);
            this.relationFK_Поставщик_СиМ_Склад_СиМ = new global::System.Data.DataRelation("FK_Поставщик СиМ_Склад СиМ", new global::System.Data.DataColumn[] {
                        this.tableСклад_СиМ.Код_сырьяColumn}, new global::System.Data.DataColumn[] {
                        this.tableПоставщик_СиМ.Код_сырьяColumn}, false);
            this.Relations.Add(this.relationFK_Поставщик_СиМ_Склад_СиМ);
            this.relationFK_Склад_ГП_Готовая_продукция = new global::System.Data.DataRelation("FK_Склад ГП_Готовая продукция", new global::System.Data.DataColumn[] {
                        this.tableГотовая_продукция.Код_товараColumn}, new global::System.Data.DataColumn[] {
                        this.tableСклад_ГП.Код_товараColumn}, false);
            this.Relations.Add(this.relationFK_Склад_ГП_Готовая_продукция);
            this.relationFK_Цех_Склад_СиМ1 = new global::System.Data.DataRelation("FK_Цех_Склад СиМ1", new global::System.Data.DataColumn[] {
                        this.tableСклад_СиМ.Код_сырьяColumn}, new global::System.Data.DataColumn[] {
                        this.tableЦех.Код_сырьяColumn}, false);
            this.Relations.Add(this.relationFK_Цех_Склад_СиМ1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeГотовая_продукция() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeЗаказчик_ГП() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeИнформация_по_товарам() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeОперации_по_готовой_продукции() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeОперации_по_складу_ГП() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeОперации_по_складу_СиМ() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeОперации_по_цеху() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeПоставщик_СиМ() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeСклад_ГП() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeСклад_СиМ() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeЦех() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            СкладDataSet ds = new СкладDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Готовая_продукцияRowChangeEventHandler(object sender, Готовая_продукцияRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Заказчик_ГПRowChangeEventHandler(object sender, Заказчик_ГПRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Информация_по_товарамRowChangeEventHandler(object sender, Информация_по_товарамRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Операции_по_готовой_продукцииRowChangeEventHandler(object sender, Операции_по_готовой_продукцииRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Операции_по_складу_ГПRowChangeEventHandler(object sender, Операции_по_складу_ГПRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Операции_по_складу_СиМRowChangeEventHandler(object sender, Операции_по_складу_СиМRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Операции_по_цехуRowChangeEventHandler(object sender, Операции_по_цехуRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Поставщик_СиМRowChangeEventHandler(object sender, Поставщик_СиМRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Склад_ГПRowChangeEventHandler(object sender, Склад_ГПRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void Склад_СиМRowChangeEventHandler(object sender, Склад_СиМRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ЦехRowChangeEventHandler(object sender, ЦехRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Готовая_продукцияDataTable : global::System.Data.TypedTableBase<Готовая_продукцияRow> {
            
            private global::System.Data.DataColumn columnКод_товара;
            
            private global::System.Data.DataColumn columnНаименование_товара;
            
            private global::System.Data.DataColumn columnКоличество_изготовлений;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            private global::System.Data.DataColumn columnКод_сырья;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Готовая_продукцияDataTable() {
                this.TableName = "Готовая продукция";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Готовая_продукцияDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Готовая_продукцияDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_товараColumn {
                get {
                    return this.columnКод_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_товараColumn {
                get {
                    return this.columnНаименование_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Количество_изготовленийColumn {
                get {
                    return this.columnКоличество_изготовлений;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_сырьяColumn {
                get {
                    return this.columnКод_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Готовая_продукцияRow this[int index] {
                get {
                    return ((Готовая_продукцияRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Готовая_продукцияRowChangeEventHandler Готовая_продукцияRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Готовая_продукцияRowChangeEventHandler Готовая_продукцияRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Готовая_продукцияRowChangeEventHandler Готовая_продукцияRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Готовая_продукцияRowChangeEventHandler Готовая_продукцияRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddГотовая_продукцияRow(Готовая_продукцияRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Готовая_продукцияRow AddГотовая_продукцияRow(int Код_товара, string Наименование_товара, int Количество_изготовлений, string Единица_измерения, ЦехRow parentЦехRowByFK_Готовая_продукция_Цех) {
                Готовая_продукцияRow rowГотовая_продукцияRow = ((Готовая_продукцияRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Код_товара,
                        Наименование_товара,
                        Количество_изготовлений,
                        Единица_измерения,
                        null};
                if ((parentЦехRowByFK_Готовая_продукция_Цех != null)) {
                    columnValuesArray[4] = parentЦехRowByFK_Готовая_продукция_Цех[0];
                }
                rowГотовая_продукцияRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowГотовая_продукцияRow);
                return rowГотовая_продукцияRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Готовая_продукцияRow FindByКод_товара(int Код_товара) {
                return ((Готовая_продукцияRow)(this.Rows.Find(new object[] {
                            Код_товара})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Готовая_продукцияDataTable cln = ((Готовая_продукцияDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Готовая_продукцияDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnКод_товара = base.Columns["Код товара"];
                this.columnНаименование_товара = base.Columns["Наименование товара"];
                this.columnКоличество_изготовлений = base.Columns["Количество изготовлений"];
                this.columnЕдиница_измерения = base.Columns["Единица измерения"];
                this.columnКод_сырья = base.Columns["Код сырья"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnКод_товара = new global::System.Data.DataColumn("Код товара", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКод_товара);
                this.columnНаименование_товара = new global::System.Data.DataColumn("Наименование товара", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаименование_товара);
                this.columnКоличество_изготовлений = new global::System.Data.DataColumn("Количество изготовлений", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество_изготовлений);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица измерения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЕдиница_измерения);
                this.columnКод_сырья = new global::System.Data.DataColumn("Код сырья", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКод_сырья);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnКод_товара}, true));
                this.columnКод_товара.AllowDBNull = false;
                this.columnКод_товара.Unique = true;
                this.columnНаименование_товара.AllowDBNull = false;
                this.columnНаименование_товара.MaxLength = 50;
                this.columnКоличество_изготовлений.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Готовая_продукцияRow NewГотовая_продукцияRow() {
                return ((Готовая_продукцияRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Готовая_продукцияRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Готовая_продукцияRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Готовая_продукцияRowChanged != null)) {
                    this.Готовая_продукцияRowChanged(this, new Готовая_продукцияRowChangeEvent(((Готовая_продукцияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Готовая_продукцияRowChanging != null)) {
                    this.Готовая_продукцияRowChanging(this, new Готовая_продукцияRowChangeEvent(((Готовая_продукцияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Готовая_продукцияRowDeleted != null)) {
                    this.Готовая_продукцияRowDeleted(this, new Готовая_продукцияRowChangeEvent(((Готовая_продукцияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Готовая_продукцияRowDeleting != null)) {
                    this.Готовая_продукцияRowDeleting(this, new Готовая_продукцияRowChangeEvent(((Готовая_продукцияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveГотовая_продукцияRow(Готовая_продукцияRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Готовая_продукцияDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Заказчик_ГПDataTable : global::System.Data.TypedTableBase<Заказчик_ГПRow> {
            
            private global::System.Data.DataColumn columnНомер_заказа;
            
            private global::System.Data.DataColumn columnНаименование_заказчика;
            
            private global::System.Data.DataColumn columnНаименование_товара;
            
            private global::System.Data.DataColumn columnКоличество;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            private global::System.Data.DataColumn columnАдрес;
            
            private global::System.Data.DataColumn columnТелефон;
            
            private global::System.Data.DataColumn columnЗаказ_закрыт;
            
            private global::System.Data.DataColumn columnКод_товара;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Заказчик_ГПDataTable() {
                this.TableName = "Заказчик ГП";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Заказчик_ГПDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Заказчик_ГПDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Номер_заказаColumn {
                get {
                    return this.columnНомер_заказа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_заказчикаColumn {
                get {
                    return this.columnНаименование_заказчика;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_товараColumn {
                get {
                    return this.columnНаименование_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn КоличествоColumn {
                get {
                    return this.columnКоличество;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn АдресColumn {
                get {
                    return this.columnАдрес;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ТелефонColumn {
                get {
                    return this.columnТелефон;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Заказ_закрытColumn {
                get {
                    return this.columnЗаказ_закрыт;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_товараColumn {
                get {
                    return this.columnКод_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Заказчик_ГПRow this[int index] {
                get {
                    return ((Заказчик_ГПRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Заказчик_ГПRowChangeEventHandler Заказчик_ГПRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Заказчик_ГПRowChangeEventHandler Заказчик_ГПRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Заказчик_ГПRowChangeEventHandler Заказчик_ГПRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Заказчик_ГПRowChangeEventHandler Заказчик_ГПRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddЗаказчик_ГПRow(Заказчик_ГПRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Заказчик_ГПRow AddЗаказчик_ГПRow(string Наименование_заказчика, string Наименование_товара, int Количество, string Единица_измерения, string Адрес, string Телефон, bool Заказ_закрыт, Склад_ГПRow parentСклад_ГПRowByFK_Заказчик_ГП_Склад_ГП) {
                Заказчик_ГПRow rowЗаказчик_ГПRow = ((Заказчик_ГПRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Наименование_заказчика,
                        Наименование_товара,
                        Количество,
                        Единица_измерения,
                        Адрес,
                        Телефон,
                        Заказ_закрыт,
                        null};
                if ((parentСклад_ГПRowByFK_Заказчик_ГП_Склад_ГП != null)) {
                    columnValuesArray[8] = parentСклад_ГПRowByFK_Заказчик_ГП_Склад_ГП[0];
                }
                rowЗаказчик_ГПRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowЗаказчик_ГПRow);
                return rowЗаказчик_ГПRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Заказчик_ГПRow FindByНомер_заказа(int Номер_заказа) {
                return ((Заказчик_ГПRow)(this.Rows.Find(new object[] {
                            Номер_заказа})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Заказчик_ГПDataTable cln = ((Заказчик_ГПDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Заказчик_ГПDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnНомер_заказа = base.Columns["Номер_заказа"];
                this.columnНаименование_заказчика = base.Columns["Наименование_заказчика"];
                this.columnНаименование_товара = base.Columns["Наименование_товара"];
                this.columnКоличество = base.Columns["Количество"];
                this.columnЕдиница_измерения = base.Columns["Единица_измерения"];
                this.columnАдрес = base.Columns["Адрес"];
                this.columnТелефон = base.Columns["Телефон"];
                this.columnЗаказ_закрыт = base.Columns["Заказ_закрыт"];
                this.columnКод_товара = base.Columns["Код_товара"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnНомер_заказа = new global::System.Data.DataColumn("Номер_заказа", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомер_заказа);
                this.columnНаименование_заказчика = new global::System.Data.DataColumn("Наименование_заказчика", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаименование_заказчика);
                this.columnНаименование_товара = new global::System.Data.DataColumn("Наименование_товара", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Наименование_товара");
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Наименование_товараColumn");
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnНаименование_товара");
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_UserColumnName", "Наименование_товара");
                base.Columns.Add(this.columnНаименование_товара);
                this.columnКоличество = new global::System.Data.DataColumn("Количество", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица_измерения", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Единица_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Единица_измеренияColumn");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnЕдиница_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_UserColumnName", "Единица_измерения");
                base.Columns.Add(this.columnЕдиница_измерения);
                this.columnАдрес = new global::System.Data.DataColumn("Адрес", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnАдрес);
                this.columnТелефон = new global::System.Data.DataColumn("Телефон", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТелефон);
                this.columnЗаказ_закрыт = new global::System.Data.DataColumn("Заказ_закрыт", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЗаказ_закрыт);
                this.columnКод_товара = new global::System.Data.DataColumn("Код_товара", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Код_товара");
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Код_товараColumn");
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnКод_товара");
                this.columnКод_товара.ExtendedProperties.Add("Generator_UserColumnName", "Код_товара");
                base.Columns.Add(this.columnКод_товара);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnНомер_заказа}, true));
                this.columnНомер_заказа.AutoIncrement = true;
                this.columnНомер_заказа.AutoIncrementSeed = -1;
                this.columnНомер_заказа.AutoIncrementStep = -1;
                this.columnНомер_заказа.AllowDBNull = false;
                this.columnНомер_заказа.ReadOnly = true;
                this.columnНомер_заказа.Unique = true;
                this.columnНаименование_заказчика.AllowDBNull = false;
                this.columnНаименование_заказчика.MaxLength = 50;
                this.columnНаименование_товара.AllowDBNull = false;
                this.columnНаименование_товара.MaxLength = 50;
                this.columnКоличество.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
                this.columnАдрес.AllowDBNull = false;
                this.columnАдрес.MaxLength = 50;
                this.columnТелефон.AllowDBNull = false;
                this.columnТелефон.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Заказчик_ГПRow NewЗаказчик_ГПRow() {
                return ((Заказчик_ГПRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Заказчик_ГПRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Заказчик_ГПRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Заказчик_ГПRowChanged != null)) {
                    this.Заказчик_ГПRowChanged(this, new Заказчик_ГПRowChangeEvent(((Заказчик_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Заказчик_ГПRowChanging != null)) {
                    this.Заказчик_ГПRowChanging(this, new Заказчик_ГПRowChangeEvent(((Заказчик_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Заказчик_ГПRowDeleted != null)) {
                    this.Заказчик_ГПRowDeleted(this, new Заказчик_ГПRowChangeEvent(((Заказчик_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Заказчик_ГПRowDeleting != null)) {
                    this.Заказчик_ГПRowDeleting(this, new Заказчик_ГПRowChangeEvent(((Заказчик_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveЗаказчик_ГПRow(Заказчик_ГПRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Заказчик_ГПDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Информация_по_товарамDataTable : global::System.Data.TypedTableBase<Информация_по_товарамRow> {
            
            private global::System.Data.DataColumn columnКод_товара;
            
            private global::System.Data.DataColumn columnКод_сырья;
            
            private global::System.Data.DataColumn columnКоличество_сырья_необходимое_для_производства_данного_товара;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Информация_по_товарамDataTable() {
                this.TableName = "Информация по товарам";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Информация_по_товарамDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Информация_по_товарамDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_товараColumn {
                get {
                    return this.columnКод_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_сырьяColumn {
                get {
                    return this.columnКод_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Количество_сырья_необходимое_для_производства_данного_товараColumn {
                get {
                    return this.columnКоличество_сырья_необходимое_для_производства_данного_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Информация_по_товарамRow this[int index] {
                get {
                    return ((Информация_по_товарамRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Информация_по_товарамRowChangeEventHandler Информация_по_товарамRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Информация_по_товарамRowChangeEventHandler Информация_по_товарамRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Информация_по_товарамRowChangeEventHandler Информация_по_товарамRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Информация_по_товарамRowChangeEventHandler Информация_по_товарамRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddИнформация_по_товарамRow(Информация_по_товарамRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Информация_по_товарамRow AddИнформация_по_товарамRow(Склад_ГПRow parentСклад_ГПRowByFK_Информация_по_товарам_Склад_ГП, Склад_СиМRow parentСклад_СиМRowByFK_Информация_по_товарам_Склад_СиМ, int Количество_сырья_необходимое_для_производства_данного_товара, string Единица_измерения) {
                Информация_по_товарамRow rowИнформация_по_товарамRow = ((Информация_по_товарамRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Количество_сырья_необходимое_для_производства_данного_товара,
                        Единица_измерения};
                if ((parentСклад_ГПRowByFK_Информация_по_товарам_Склад_ГП != null)) {
                    columnValuesArray[0] = parentСклад_ГПRowByFK_Информация_по_товарам_Склад_ГП[0];
                }
                if ((parentСклад_СиМRowByFK_Информация_по_товарам_Склад_СиМ != null)) {
                    columnValuesArray[1] = parentСклад_СиМRowByFK_Информация_по_товарам_Склад_СиМ[0];
                }
                rowИнформация_по_товарамRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowИнформация_по_товарамRow);
                return rowИнформация_по_товарамRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Информация_по_товарамRow FindByКод_товараКод_сырья(int Код_товара, int Код_сырья) {
                return ((Информация_по_товарамRow)(this.Rows.Find(new object[] {
                            Код_товара,
                            Код_сырья})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Информация_по_товарамDataTable cln = ((Информация_по_товарамDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Информация_по_товарамDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnКод_товара = base.Columns["Код_товара"];
                this.columnКод_сырья = base.Columns["Код_сырья"];
                this.columnКоличество_сырья_необходимое_для_производства_данного_товара = base.Columns["Количество_сырья_необходимое_для_производства_данного_товара"];
                this.columnЕдиница_измерения = base.Columns["Единица_измерения"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnКод_товара = new global::System.Data.DataColumn("Код_товара", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Код_товара");
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Код_товараColumn");
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnКод_товара");
                this.columnКод_товара.ExtendedProperties.Add("Generator_UserColumnName", "Код_товара");
                base.Columns.Add(this.columnКод_товара);
                this.columnКод_сырья = new global::System.Data.DataColumn("Код_сырья", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Код_сырья");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Код_сырьяColumn");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnКод_сырья");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_UserColumnName", "Код_сырья");
                base.Columns.Add(this.columnКод_сырья);
                this.columnКоличество_сырья_необходимое_для_производства_данного_товара = new global::System.Data.DataColumn("Количество_сырья_необходимое_для_производства_данного_товара", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество_сырья_необходимое_для_производства_данного_товара);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица_измерения", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Единица_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Единица_измеренияColumn");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnЕдиница_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_UserColumnName", "Единица_измерения");
                base.Columns.Add(this.columnЕдиница_измерения);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnКод_товара,
                                this.columnКод_сырья}, true));
                this.columnКод_товара.AllowDBNull = false;
                this.columnКод_сырья.AllowDBNull = false;
                this.columnКоличество_сырья_необходимое_для_производства_данного_товара.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Информация_по_товарамRow NewИнформация_по_товарамRow() {
                return ((Информация_по_товарамRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Информация_по_товарамRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Информация_по_товарамRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Информация_по_товарамRowChanged != null)) {
                    this.Информация_по_товарамRowChanged(this, new Информация_по_товарамRowChangeEvent(((Информация_по_товарамRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Информация_по_товарамRowChanging != null)) {
                    this.Информация_по_товарамRowChanging(this, new Информация_по_товарамRowChangeEvent(((Информация_по_товарамRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Информация_по_товарамRowDeleted != null)) {
                    this.Информация_по_товарамRowDeleted(this, new Информация_по_товарамRowChangeEvent(((Информация_по_товарамRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Информация_по_товарамRowDeleting != null)) {
                    this.Информация_по_товарамRowDeleting(this, new Информация_по_товарамRowChangeEvent(((Информация_по_товарамRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveИнформация_по_товарамRow(Информация_по_товарамRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Информация_по_товарамDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Операции_по_готовой_продукцииDataTable : global::System.Data.TypedTableBase<Операции_по_готовой_продукцииRow> {
            
            private global::System.Data.DataColumn columnНомер_операции;
            
            private global::System.Data.DataColumn columnКод_товара;
            
            private global::System.Data.DataColumn columnНаименование_товара;
            
            private global::System.Data.DataColumn columnСтатус;
            
            private global::System.Data.DataColumn columnДата;
            
            private global::System.Data.DataColumn columnКоличество;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_готовой_продукцииDataTable() {
                this.TableName = "Операции по готовой продукции";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Операции_по_готовой_продукцииDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Операции_по_готовой_продукцииDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Номер_операцииColumn {
                get {
                    return this.columnНомер_операции;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_товараColumn {
                get {
                    return this.columnКод_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_товараColumn {
                get {
                    return this.columnНаименование_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn СтатусColumn {
                get {
                    return this.columnСтатус;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ДатаColumn {
                get {
                    return this.columnДата;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn КоличествоColumn {
                get {
                    return this.columnКоличество;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_готовой_продукцииRow this[int index] {
                get {
                    return ((Операции_по_готовой_продукцииRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_готовой_продукцииRowChangeEventHandler Операции_по_готовой_продукцииRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_готовой_продукцииRowChangeEventHandler Операции_по_готовой_продукцииRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_готовой_продукцииRowChangeEventHandler Операции_по_готовой_продукцииRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_готовой_продукцииRowChangeEventHandler Операции_по_готовой_продукцииRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddОперации_по_готовой_продукцииRow(Операции_по_готовой_продукцииRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_готовой_продукцииRow AddОперации_по_готовой_продукцииRow(int Номер_операции, Готовая_продукцияRow parentГотовая_продукцияRowByFK_Операции_по_готовой_продукции_Готовая_продукция, string Наименование_товара, string Статус, System.DateTime Дата, int Количество, string Единица_измерения) {
                Операции_по_готовой_продукцииRow rowОперации_по_готовой_продукцииRow = ((Операции_по_готовой_продукцииRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Номер_операции,
                        null,
                        Наименование_товара,
                        Статус,
                        Дата,
                        Количество,
                        Единица_измерения};
                if ((parentГотовая_продукцияRowByFK_Операции_по_готовой_продукции_Готовая_продукция != null)) {
                    columnValuesArray[1] = parentГотовая_продукцияRowByFK_Операции_по_готовой_продукции_Готовая_продукция[0];
                }
                rowОперации_по_готовой_продукцииRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowОперации_по_готовой_продукцииRow);
                return rowОперации_по_готовой_продукцииRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_готовой_продукцииRow FindByНомер_операции(int Номер_операции) {
                return ((Операции_по_готовой_продукцииRow)(this.Rows.Find(new object[] {
                            Номер_операции})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Операции_по_готовой_продукцииDataTable cln = ((Операции_по_готовой_продукцииDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Операции_по_готовой_продукцииDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnНомер_операции = base.Columns["Номер операции"];
                this.columnКод_товара = base.Columns["Код товара"];
                this.columnНаименование_товара = base.Columns["Наименование товара"];
                this.columnСтатус = base.Columns["Статус"];
                this.columnДата = base.Columns["Дата"];
                this.columnКоличество = base.Columns["Количество"];
                this.columnЕдиница_измерения = base.Columns["Единица измерения"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnНомер_операции = new global::System.Data.DataColumn("Номер операции", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомер_операции);
                this.columnКод_товара = new global::System.Data.DataColumn("Код товара", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКод_товара);
                this.columnНаименование_товара = new global::System.Data.DataColumn("Наименование товара", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаименование_товара);
                this.columnСтатус = new global::System.Data.DataColumn("Статус", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтатус);
                this.columnДата = new global::System.Data.DataColumn("Дата", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДата);
                this.columnКоличество = new global::System.Data.DataColumn("Количество", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица измерения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЕдиница_измерения);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnНомер_операции}, true));
                this.columnНомер_операции.AllowDBNull = false;
                this.columnНомер_операции.Unique = true;
                this.columnКод_товара.AllowDBNull = false;
                this.columnНаименование_товара.AllowDBNull = false;
                this.columnНаименование_товара.MaxLength = 50;
                this.columnСтатус.AllowDBNull = false;
                this.columnСтатус.MaxLength = 50;
                this.columnДата.AllowDBNull = false;
                this.columnКоличество.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_готовой_продукцииRow NewОперации_по_готовой_продукцииRow() {
                return ((Операции_по_готовой_продукцииRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Операции_по_готовой_продукцииRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Операции_по_готовой_продукцииRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Операции_по_готовой_продукцииRowChanged != null)) {
                    this.Операции_по_готовой_продукцииRowChanged(this, new Операции_по_готовой_продукцииRowChangeEvent(((Операции_по_готовой_продукцииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Операции_по_готовой_продукцииRowChanging != null)) {
                    this.Операции_по_готовой_продукцииRowChanging(this, new Операции_по_готовой_продукцииRowChangeEvent(((Операции_по_готовой_продукцииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Операции_по_готовой_продукцииRowDeleted != null)) {
                    this.Операции_по_готовой_продукцииRowDeleted(this, new Операции_по_готовой_продукцииRowChangeEvent(((Операции_по_готовой_продукцииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Операции_по_готовой_продукцииRowDeleting != null)) {
                    this.Операции_по_готовой_продукцииRowDeleting(this, new Операции_по_готовой_продукцииRowChangeEvent(((Операции_по_готовой_продукцииRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveОперации_по_готовой_продукцииRow(Операции_по_готовой_продукцииRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Операции_по_готовой_продукцииDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Операции_по_складу_ГПDataTable : global::System.Data.TypedTableBase<Операции_по_складу_ГПRow> {
            
            private global::System.Data.DataColumn columnНомер_операции;
            
            private global::System.Data.DataColumn columnКод_товара;
            
            private global::System.Data.DataColumn columnНаименование_товара;
            
            private global::System.Data.DataColumn columnСтатус;
            
            private global::System.Data.DataColumn columnДата;
            
            private global::System.Data.DataColumn columnКоличество;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_ГПDataTable() {
                this.TableName = "Операции по складу ГП";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Операции_по_складу_ГПDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Операции_по_складу_ГПDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Номер_операцииColumn {
                get {
                    return this.columnНомер_операции;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_товараColumn {
                get {
                    return this.columnКод_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_товараColumn {
                get {
                    return this.columnНаименование_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn СтатусColumn {
                get {
                    return this.columnСтатус;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ДатаColumn {
                get {
                    return this.columnДата;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn КоличествоColumn {
                get {
                    return this.columnКоличество;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_ГПRow this[int index] {
                get {
                    return ((Операции_по_складу_ГПRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_складу_ГПRowChangeEventHandler Операции_по_складу_ГПRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_складу_ГПRowChangeEventHandler Операции_по_складу_ГПRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_складу_ГПRowChangeEventHandler Операции_по_складу_ГПRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_складу_ГПRowChangeEventHandler Операции_по_складу_ГПRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddОперации_по_складу_ГПRow(Операции_по_складу_ГПRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_ГПRow AddОперации_по_складу_ГПRow(int Номер_операции, Склад_ГПRow parentСклад_ГПRowByFK_Операции_по_складу_ГП_Склад_ГП, string Наименование_товара, string Статус, System.DateTime Дата, int Количество, string Единица_измерения) {
                Операции_по_складу_ГПRow rowОперации_по_складу_ГПRow = ((Операции_по_складу_ГПRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Номер_операции,
                        null,
                        Наименование_товара,
                        Статус,
                        Дата,
                        Количество,
                        Единица_измерения};
                if ((parentСклад_ГПRowByFK_Операции_по_складу_ГП_Склад_ГП != null)) {
                    columnValuesArray[1] = parentСклад_ГПRowByFK_Операции_по_складу_ГП_Склад_ГП[0];
                }
                rowОперации_по_складу_ГПRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowОперации_по_складу_ГПRow);
                return rowОперации_по_складу_ГПRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_ГПRow FindByНомер_операции(int Номер_операции) {
                return ((Операции_по_складу_ГПRow)(this.Rows.Find(new object[] {
                            Номер_операции})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Операции_по_складу_ГПDataTable cln = ((Операции_по_складу_ГПDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Операции_по_складу_ГПDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnНомер_операции = base.Columns["Номер_операции"];
                this.columnКод_товара = base.Columns["Код_товара"];
                this.columnНаименование_товара = base.Columns["Наименование_товара"];
                this.columnСтатус = base.Columns["Статус"];
                this.columnДата = base.Columns["Дата"];
                this.columnКоличество = base.Columns["Количество"];
                this.columnЕдиница_измерения = base.Columns["Единица_измерения"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnНомер_операции = new global::System.Data.DataColumn("Номер_операции", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnНомер_операции.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Номер_операции");
                this.columnНомер_операции.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Номер_операцииColumn");
                this.columnНомер_операции.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnНомер_операции");
                this.columnНомер_операции.ExtendedProperties.Add("Generator_UserColumnName", "Номер_операции");
                base.Columns.Add(this.columnНомер_операции);
                this.columnКод_товара = new global::System.Data.DataColumn("Код_товара", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Код_товара");
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Код_товараColumn");
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnКод_товара");
                this.columnКод_товара.ExtendedProperties.Add("Generator_UserColumnName", "Код_товара");
                base.Columns.Add(this.columnКод_товара);
                this.columnНаименование_товара = new global::System.Data.DataColumn("Наименование_товара", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Наименование_товара");
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Наименование_товараColumn");
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnНаименование_товара");
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_UserColumnName", "Наименование_товара");
                base.Columns.Add(this.columnНаименование_товара);
                this.columnСтатус = new global::System.Data.DataColumn("Статус", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтатус);
                this.columnДата = new global::System.Data.DataColumn("Дата", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДата);
                this.columnКоличество = new global::System.Data.DataColumn("Количество", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица_измерения", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Единица_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Единица_измеренияColumn");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnЕдиница_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_UserColumnName", "Единица_измерения");
                base.Columns.Add(this.columnЕдиница_измерения);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnНомер_операции}, true));
                this.columnНомер_операции.AllowDBNull = false;
                this.columnНомер_операции.Unique = true;
                this.columnКод_товара.AllowDBNull = false;
                this.columnНаименование_товара.AllowDBNull = false;
                this.columnНаименование_товара.MaxLength = 50;
                this.columnСтатус.AllowDBNull = false;
                this.columnСтатус.MaxLength = 50;
                this.columnДата.AllowDBNull = false;
                this.columnКоличество.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_ГПRow NewОперации_по_складу_ГПRow() {
                return ((Операции_по_складу_ГПRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Операции_по_складу_ГПRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Операции_по_складу_ГПRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Операции_по_складу_ГПRowChanged != null)) {
                    this.Операции_по_складу_ГПRowChanged(this, new Операции_по_складу_ГПRowChangeEvent(((Операции_по_складу_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Операции_по_складу_ГПRowChanging != null)) {
                    this.Операции_по_складу_ГПRowChanging(this, new Операции_по_складу_ГПRowChangeEvent(((Операции_по_складу_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Операции_по_складу_ГПRowDeleted != null)) {
                    this.Операции_по_складу_ГПRowDeleted(this, new Операции_по_складу_ГПRowChangeEvent(((Операции_по_складу_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Операции_по_складу_ГПRowDeleting != null)) {
                    this.Операции_по_складу_ГПRowDeleting(this, new Операции_по_складу_ГПRowChangeEvent(((Операции_по_складу_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveОперации_по_складу_ГПRow(Операции_по_складу_ГПRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Операции_по_складу_ГПDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Операции_по_складу_СиМDataTable : global::System.Data.TypedTableBase<Операции_по_складу_СиМRow> {
            
            private global::System.Data.DataColumn columnНомер_операции;
            
            private global::System.Data.DataColumn columnКод_сырья;
            
            private global::System.Data.DataColumn columnНаименование_сырья;
            
            private global::System.Data.DataColumn columnСтатус;
            
            private global::System.Data.DataColumn columnДата;
            
            private global::System.Data.DataColumn columnКоличество;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_СиМDataTable() {
                this.TableName = "Операции по складу СиМ";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Операции_по_складу_СиМDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Операции_по_складу_СиМDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Номер_операцииColumn {
                get {
                    return this.columnНомер_операции;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_сырьяColumn {
                get {
                    return this.columnКод_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_сырьяColumn {
                get {
                    return this.columnНаименование_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn СтатусColumn {
                get {
                    return this.columnСтатус;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ДатаColumn {
                get {
                    return this.columnДата;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn КоличествоColumn {
                get {
                    return this.columnКоличество;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_СиМRow this[int index] {
                get {
                    return ((Операции_по_складу_СиМRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_складу_СиМRowChangeEventHandler Операции_по_складу_СиМRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_складу_СиМRowChangeEventHandler Операции_по_складу_СиМRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_складу_СиМRowChangeEventHandler Операции_по_складу_СиМRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_складу_СиМRowChangeEventHandler Операции_по_складу_СиМRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddОперации_по_складу_СиМRow(Операции_по_складу_СиМRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_СиМRow AddОперации_по_складу_СиМRow(int Номер_операции, Склад_СиМRow parentСклад_СиМRowByFK_Операции_по_складу_СиМ_Склад_СиМ, string Наименование_сырья, string Статус, System.DateTime Дата, int Количество, string Единица_измерения) {
                Операции_по_складу_СиМRow rowОперации_по_складу_СиМRow = ((Операции_по_складу_СиМRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Номер_операции,
                        null,
                        Наименование_сырья,
                        Статус,
                        Дата,
                        Количество,
                        Единица_измерения};
                if ((parentСклад_СиМRowByFK_Операции_по_складу_СиМ_Склад_СиМ != null)) {
                    columnValuesArray[1] = parentСклад_СиМRowByFK_Операции_по_складу_СиМ_Склад_СиМ[0];
                }
                rowОперации_по_складу_СиМRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowОперации_по_складу_СиМRow);
                return rowОперации_по_складу_СиМRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_СиМRow FindByНомер_операции(int Номер_операции) {
                return ((Операции_по_складу_СиМRow)(this.Rows.Find(new object[] {
                            Номер_операции})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Операции_по_складу_СиМDataTable cln = ((Операции_по_складу_СиМDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Операции_по_складу_СиМDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnНомер_операции = base.Columns["Номер_операции"];
                this.columnКод_сырья = base.Columns["Код_сырья"];
                this.columnНаименование_сырья = base.Columns["Наименование_сырья"];
                this.columnСтатус = base.Columns["Статус"];
                this.columnДата = base.Columns["Дата"];
                this.columnКоличество = base.Columns["Количество"];
                this.columnЕдиница_измерения = base.Columns["Единица_измерения"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnНомер_операции = new global::System.Data.DataColumn("Номер_операции", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnНомер_операции.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Номер_операции");
                this.columnНомер_операции.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Номер_операцииColumn");
                this.columnНомер_операции.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnНомер_операции");
                this.columnНомер_операции.ExtendedProperties.Add("Generator_UserColumnName", "Номер_операции");
                base.Columns.Add(this.columnНомер_операции);
                this.columnКод_сырья = new global::System.Data.DataColumn("Код_сырья", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Код_сырья");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Код_сырьяColumn");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnКод_сырья");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_UserColumnName", "Код_сырья");
                base.Columns.Add(this.columnКод_сырья);
                this.columnНаименование_сырья = new global::System.Data.DataColumn("Наименование_сырья", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаименование_сырья);
                this.columnСтатус = new global::System.Data.DataColumn("Статус", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтатус);
                this.columnДата = new global::System.Data.DataColumn("Дата", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДата);
                this.columnКоличество = new global::System.Data.DataColumn("Количество", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица_измерения", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Единица_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Единица_измеренияColumn");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnЕдиница_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_UserColumnName", "Единица_измерения");
                base.Columns.Add(this.columnЕдиница_измерения);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnНомер_операции}, true));
                this.columnНомер_операции.AllowDBNull = false;
                this.columnНомер_операции.Unique = true;
                this.columnКод_сырья.AllowDBNull = false;
                this.columnНаименование_сырья.AllowDBNull = false;
                this.columnНаименование_сырья.MaxLength = 50;
                this.columnСтатус.AllowDBNull = false;
                this.columnСтатус.MaxLength = 50;
                this.columnДата.AllowDBNull = false;
                this.columnКоличество.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_СиМRow NewОперации_по_складу_СиМRow() {
                return ((Операции_по_складу_СиМRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Операции_по_складу_СиМRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Операции_по_складу_СиМRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Операции_по_складу_СиМRowChanged != null)) {
                    this.Операции_по_складу_СиМRowChanged(this, new Операции_по_складу_СиМRowChangeEvent(((Операции_по_складу_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Операции_по_складу_СиМRowChanging != null)) {
                    this.Операции_по_складу_СиМRowChanging(this, new Операции_по_складу_СиМRowChangeEvent(((Операции_по_складу_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Операции_по_складу_СиМRowDeleted != null)) {
                    this.Операции_по_складу_СиМRowDeleted(this, new Операции_по_складу_СиМRowChangeEvent(((Операции_по_складу_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Операции_по_складу_СиМRowDeleting != null)) {
                    this.Операции_по_складу_СиМRowDeleting(this, new Операции_по_складу_СиМRowChangeEvent(((Операции_по_складу_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveОперации_по_складу_СиМRow(Операции_по_складу_СиМRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Операции_по_складу_СиМDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Операции_по_цехуDataTable : global::System.Data.TypedTableBase<Операции_по_цехуRow> {
            
            private global::System.Data.DataColumn columnНомер_операции;
            
            private global::System.Data.DataColumn columnКод_сырья;
            
            private global::System.Data.DataColumn columnНаименование_сырья;
            
            private global::System.Data.DataColumn columnСтатус;
            
            private global::System.Data.DataColumn columnДата;
            
            private global::System.Data.DataColumn columnКоличество;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_цехуDataTable() {
                this.TableName = "Операции по цеху";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Операции_по_цехуDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Операции_по_цехуDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Номер_операцииColumn {
                get {
                    return this.columnНомер_операции;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_сырьяColumn {
                get {
                    return this.columnКод_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_сырьяColumn {
                get {
                    return this.columnНаименование_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn СтатусColumn {
                get {
                    return this.columnСтатус;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ДатаColumn {
                get {
                    return this.columnДата;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn КоличествоColumn {
                get {
                    return this.columnКоличество;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_цехуRow this[int index] {
                get {
                    return ((Операции_по_цехуRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_цехуRowChangeEventHandler Операции_по_цехуRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_цехуRowChangeEventHandler Операции_по_цехуRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_цехуRowChangeEventHandler Операции_по_цехуRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Операции_по_цехуRowChangeEventHandler Операции_по_цехуRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddОперации_по_цехуRow(Операции_по_цехуRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_цехуRow AddОперации_по_цехуRow(int Номер_операции, ЦехRow parentЦехRowByFK_Операции_по_цеху_Цех, string Наименование_сырья, string Статус, System.DateTime Дата, int Количество, string Единица_измерения) {
                Операции_по_цехуRow rowОперации_по_цехуRow = ((Операции_по_цехуRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Номер_операции,
                        null,
                        Наименование_сырья,
                        Статус,
                        Дата,
                        Количество,
                        Единица_измерения};
                if ((parentЦехRowByFK_Операции_по_цеху_Цех != null)) {
                    columnValuesArray[1] = parentЦехRowByFK_Операции_по_цеху_Цех[0];
                }
                rowОперации_по_цехуRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowОперации_по_цехуRow);
                return rowОперации_по_цехуRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_цехуRow FindByНомер_операции(int Номер_операции) {
                return ((Операции_по_цехуRow)(this.Rows.Find(new object[] {
                            Номер_операции})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Операции_по_цехуDataTable cln = ((Операции_по_цехуDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Операции_по_цехуDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnНомер_операции = base.Columns["Номер_операции"];
                this.columnКод_сырья = base.Columns["Код_сырья"];
                this.columnНаименование_сырья = base.Columns["Наименование_сырья"];
                this.columnСтатус = base.Columns["Статус"];
                this.columnДата = base.Columns["Дата"];
                this.columnКоличество = base.Columns["Количество"];
                this.columnЕдиница_измерения = base.Columns["Единица_измерения"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnНомер_операции = new global::System.Data.DataColumn("Номер_операции", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnНомер_операции.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Номер_операции");
                this.columnНомер_операции.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Номер_операцииColumn");
                this.columnНомер_операции.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnНомер_операции");
                this.columnНомер_операции.ExtendedProperties.Add("Generator_UserColumnName", "Номер_операции");
                base.Columns.Add(this.columnНомер_операции);
                this.columnКод_сырья = new global::System.Data.DataColumn("Код_сырья", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Код_сырья");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Код_сырьяColumn");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnКод_сырья");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_UserColumnName", "Код_сырья");
                base.Columns.Add(this.columnКод_сырья);
                this.columnНаименование_сырья = new global::System.Data.DataColumn("Наименование_сырья", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаименование_сырья);
                this.columnСтатус = new global::System.Data.DataColumn("Статус", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтатус);
                this.columnДата = new global::System.Data.DataColumn("Дата", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДата);
                this.columnКоличество = new global::System.Data.DataColumn("Количество", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица_измерения", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Единица_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Единица_измеренияColumn");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnЕдиница_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_UserColumnName", "Единица_измерения");
                base.Columns.Add(this.columnЕдиница_измерения);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnНомер_операции}, true));
                this.columnНомер_операции.AllowDBNull = false;
                this.columnНомер_операции.Unique = true;
                this.columnКод_сырья.AllowDBNull = false;
                this.columnНаименование_сырья.AllowDBNull = false;
                this.columnНаименование_сырья.MaxLength = 50;
                this.columnСтатус.AllowDBNull = false;
                this.columnСтатус.MaxLength = 50;
                this.columnДата.AllowDBNull = false;
                this.columnКоличество.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_цехуRow NewОперации_по_цехуRow() {
                return ((Операции_по_цехуRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Операции_по_цехуRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Операции_по_цехуRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Операции_по_цехуRowChanged != null)) {
                    this.Операции_по_цехуRowChanged(this, new Операции_по_цехуRowChangeEvent(((Операции_по_цехуRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Операции_по_цехуRowChanging != null)) {
                    this.Операции_по_цехуRowChanging(this, new Операции_по_цехуRowChangeEvent(((Операции_по_цехуRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Операции_по_цехуRowDeleted != null)) {
                    this.Операции_по_цехуRowDeleted(this, new Операции_по_цехуRowChangeEvent(((Операции_по_цехуRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Операции_по_цехуRowDeleting != null)) {
                    this.Операции_по_цехуRowDeleting(this, new Операции_по_цехуRowChangeEvent(((Операции_по_цехуRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveОперации_по_цехуRow(Операции_по_цехуRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Операции_по_цехуDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Поставщик_СиМDataTable : global::System.Data.TypedTableBase<Поставщик_СиМRow> {
            
            private global::System.Data.DataColumn columnКод_поставщика;
            
            private global::System.Data.DataColumn columnНаименование_организации;
            
            private global::System.Data.DataColumn columnКод_сырья;
            
            private global::System.Data.DataColumn columnНаименование_сырья;
            
            private global::System.Data.DataColumn columnСтоимость;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            private global::System.Data.DataColumn columnАдрес_организации;
            
            private global::System.Data.DataColumn columnТелефон;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Поставщик_СиМDataTable() {
                this.TableName = "Поставщик СиМ";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Поставщик_СиМDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Поставщик_СиМDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_поставщикаColumn {
                get {
                    return this.columnКод_поставщика;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_организацииColumn {
                get {
                    return this.columnНаименование_организации;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_сырьяColumn {
                get {
                    return this.columnКод_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_сырьяColumn {
                get {
                    return this.columnНаименование_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn СтоимостьColumn {
                get {
                    return this.columnСтоимость;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Адрес_организацииColumn {
                get {
                    return this.columnАдрес_организации;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn ТелефонColumn {
                get {
                    return this.columnТелефон;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Поставщик_СиМRow this[int index] {
                get {
                    return ((Поставщик_СиМRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Поставщик_СиМRowChangeEventHandler Поставщик_СиМRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Поставщик_СиМRowChangeEventHandler Поставщик_СиМRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Поставщик_СиМRowChangeEventHandler Поставщик_СиМRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Поставщик_СиМRowChangeEventHandler Поставщик_СиМRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddПоставщик_СиМRow(Поставщик_СиМRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Поставщик_СиМRow AddПоставщик_СиМRow(int Код_поставщика, string Наименование_организации, Склад_СиМRow parentСклад_СиМRowByFK_Поставщик_СиМ_Склад_СиМ, string Наименование_сырья, decimal Стоимость, string Единица_измерения, string Адрес_организации, string Телефон) {
                Поставщик_СиМRow rowПоставщик_СиМRow = ((Поставщик_СиМRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Код_поставщика,
                        Наименование_организации,
                        null,
                        Наименование_сырья,
                        Стоимость,
                        Единица_измерения,
                        Адрес_организации,
                        Телефон};
                if ((parentСклад_СиМRowByFK_Поставщик_СиМ_Склад_СиМ != null)) {
                    columnValuesArray[2] = parentСклад_СиМRowByFK_Поставщик_СиМ_Склад_СиМ[0];
                }
                rowПоставщик_СиМRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПоставщик_СиМRow);
                return rowПоставщик_СиМRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Поставщик_СиМRow FindByКод_поставщика(int Код_поставщика) {
                return ((Поставщик_СиМRow)(this.Rows.Find(new object[] {
                            Код_поставщика})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Поставщик_СиМDataTable cln = ((Поставщик_СиМDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Поставщик_СиМDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnКод_поставщика = base.Columns["Код_поставщика"];
                this.columnНаименование_организации = base.Columns["Наименование_организации"];
                this.columnКод_сырья = base.Columns["Код_сырья"];
                this.columnНаименование_сырья = base.Columns["Наименование_сырья"];
                this.columnСтоимость = base.Columns["Стоимость"];
                this.columnЕдиница_измерения = base.Columns["Единица_измерения"];
                this.columnАдрес_организации = base.Columns["Адрес_организации"];
                this.columnТелефон = base.Columns["Телефон"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnКод_поставщика = new global::System.Data.DataColumn("Код_поставщика", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКод_поставщика);
                this.columnНаименование_организации = new global::System.Data.DataColumn("Наименование_организации", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаименование_организации);
                this.columnКод_сырья = new global::System.Data.DataColumn("Код_сырья", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Код_сырья");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Код_сырьяColumn");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnКод_сырья");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_UserColumnName", "Код_сырья");
                base.Columns.Add(this.columnКод_сырья);
                this.columnНаименование_сырья = new global::System.Data.DataColumn("Наименование_сырья", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаименование_сырья);
                this.columnСтоимость = new global::System.Data.DataColumn("Стоимость", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтоимость);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица_измерения", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Единица_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Единица_измеренияColumn");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnЕдиница_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_UserColumnName", "Единица_измерения");
                base.Columns.Add(this.columnЕдиница_измерения);
                this.columnАдрес_организации = new global::System.Data.DataColumn("Адрес_организации", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnАдрес_организации);
                this.columnТелефон = new global::System.Data.DataColumn("Телефон", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТелефон);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnКод_поставщика}, true));
                this.columnКод_поставщика.AllowDBNull = false;
                this.columnКод_поставщика.Unique = true;
                this.columnНаименование_организации.AllowDBNull = false;
                this.columnНаименование_организации.MaxLength = 50;
                this.columnКод_сырья.AllowDBNull = false;
                this.columnНаименование_сырья.AllowDBNull = false;
                this.columnНаименование_сырья.MaxLength = 50;
                this.columnСтоимость.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
                this.columnАдрес_организации.AllowDBNull = false;
                this.columnАдрес_организации.MaxLength = 50;
                this.columnТелефон.AllowDBNull = false;
                this.columnТелефон.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Поставщик_СиМRow NewПоставщик_СиМRow() {
                return ((Поставщик_СиМRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Поставщик_СиМRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Поставщик_СиМRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Поставщик_СиМRowChanged != null)) {
                    this.Поставщик_СиМRowChanged(this, new Поставщик_СиМRowChangeEvent(((Поставщик_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Поставщик_СиМRowChanging != null)) {
                    this.Поставщик_СиМRowChanging(this, new Поставщик_СиМRowChangeEvent(((Поставщик_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Поставщик_СиМRowDeleted != null)) {
                    this.Поставщик_СиМRowDeleted(this, new Поставщик_СиМRowChangeEvent(((Поставщик_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Поставщик_СиМRowDeleting != null)) {
                    this.Поставщик_СиМRowDeleting(this, new Поставщик_СиМRowChangeEvent(((Поставщик_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveПоставщик_СиМRow(Поставщик_СиМRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Поставщик_СиМDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Склад_ГПDataTable : global::System.Data.TypedTableBase<Склад_ГПRow> {
            
            private global::System.Data.DataColumn columnКод_товара;
            
            private global::System.Data.DataColumn columnНаименование_товара;
            
            private global::System.Data.DataColumn columnКоличество_на_складе;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПDataTable() {
                this.TableName = "Склад ГП";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Склад_ГПDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Склад_ГПDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_товараColumn {
                get {
                    return this.columnКод_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_товараColumn {
                get {
                    return this.columnНаименование_товара;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Количество_на_складеColumn {
                get {
                    return this.columnКоличество_на_складе;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПRow this[int index] {
                get {
                    return ((Склад_ГПRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Склад_ГПRowChangeEventHandler Склад_ГПRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Склад_ГПRowChangeEventHandler Склад_ГПRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Склад_ГПRowChangeEventHandler Склад_ГПRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Склад_ГПRowChangeEventHandler Склад_ГПRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddСклад_ГПRow(Склад_ГПRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПRow AddСклад_ГПRow(Готовая_продукцияRow parentГотовая_продукцияRowByFK_Склад_ГП_Готовая_продукция, string Наименование_товара, int Количество_на_складе, string Единица_измерения) {
                Склад_ГПRow rowСклад_ГПRow = ((Склад_ГПRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Наименование_товара,
                        Количество_на_складе,
                        Единица_измерения};
                if ((parentГотовая_продукцияRowByFK_Склад_ГП_Готовая_продукция != null)) {
                    columnValuesArray[0] = parentГотовая_продукцияRowByFK_Склад_ГП_Готовая_продукция[0];
                }
                rowСклад_ГПRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowСклад_ГПRow);
                return rowСклад_ГПRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПRow FindByКод_товара(int Код_товара) {
                return ((Склад_ГПRow)(this.Rows.Find(new object[] {
                            Код_товара})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Склад_ГПDataTable cln = ((Склад_ГПDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Склад_ГПDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnКод_товара = base.Columns["Код_товара"];
                this.columnНаименование_товара = base.Columns["Наименование_товара"];
                this.columnКоличество_на_складе = base.Columns["Количество_на_складе"];
                this.columnЕдиница_измерения = base.Columns["Единица_измерения"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnКод_товара = new global::System.Data.DataColumn("Код_товара", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Код_товара");
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Код_товараColumn");
                this.columnКод_товара.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnКод_товара");
                this.columnКод_товара.ExtendedProperties.Add("Generator_UserColumnName", "Код_товара");
                base.Columns.Add(this.columnКод_товара);
                this.columnНаименование_товара = new global::System.Data.DataColumn("Наименование_товара", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Наименование_товара");
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Наименование_товараColumn");
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnНаименование_товара");
                this.columnНаименование_товара.ExtendedProperties.Add("Generator_UserColumnName", "Наименование_товара");
                base.Columns.Add(this.columnНаименование_товара);
                this.columnКоличество_на_складе = new global::System.Data.DataColumn("Количество_на_складе", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество_на_складе);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица_измерения", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Единица_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Единица_измеренияColumn");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnЕдиница_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_UserColumnName", "Единица_измерения");
                base.Columns.Add(this.columnЕдиница_измерения);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnКод_товара}, true));
                this.columnКод_товара.AllowDBNull = false;
                this.columnКод_товара.Unique = true;
                this.columnНаименование_товара.AllowDBNull = false;
                this.columnНаименование_товара.MaxLength = 50;
                this.columnКоличество_на_складе.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПRow NewСклад_ГПRow() {
                return ((Склад_ГПRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Склад_ГПRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Склад_ГПRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Склад_ГПRowChanged != null)) {
                    this.Склад_ГПRowChanged(this, new Склад_ГПRowChangeEvent(((Склад_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Склад_ГПRowChanging != null)) {
                    this.Склад_ГПRowChanging(this, new Склад_ГПRowChangeEvent(((Склад_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Склад_ГПRowDeleted != null)) {
                    this.Склад_ГПRowDeleted(this, new Склад_ГПRowChangeEvent(((Склад_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Склад_ГПRowDeleting != null)) {
                    this.Склад_ГПRowDeleting(this, new Склад_ГПRowChangeEvent(((Склад_ГПRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveСклад_ГПRow(Склад_ГПRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Склад_ГПDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Склад_СиМDataTable : global::System.Data.TypedTableBase<Склад_СиМRow> {
            
            private global::System.Data.DataColumn columnКод_сырья;
            
            private global::System.Data.DataColumn columnНаименование_сырья;
            
            private global::System.Data.DataColumn columnКоличество_на_складе;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМDataTable() {
                this.TableName = "Склад СиМ";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Склад_СиМDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected Склад_СиМDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_сырьяColumn {
                get {
                    return this.columnКод_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_сырьяColumn {
                get {
                    return this.columnНаименование_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Количество_на_складеColumn {
                get {
                    return this.columnКоличество_на_складе;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМRow this[int index] {
                get {
                    return ((Склад_СиМRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Склад_СиМRowChangeEventHandler Склад_СиМRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Склад_СиМRowChangeEventHandler Склад_СиМRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Склад_СиМRowChangeEventHandler Склад_СиМRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event Склад_СиМRowChangeEventHandler Склад_СиМRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddСклад_СиМRow(Склад_СиМRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМRow AddСклад_СиМRow(int Код_сырья, string Наименование_сырья, int Количество_на_складе, string Единица_измерения) {
                Склад_СиМRow rowСклад_СиМRow = ((Склад_СиМRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Код_сырья,
                        Наименование_сырья,
                        Количество_на_складе,
                        Единица_измерения};
                rowСклад_СиМRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowСклад_СиМRow);
                return rowСклад_СиМRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМRow FindByКод_сырья(int Код_сырья) {
                return ((Склад_СиМRow)(this.Rows.Find(new object[] {
                            Код_сырья})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Склад_СиМDataTable cln = ((Склад_СиМDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Склад_СиМDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnКод_сырья = base.Columns["Код_сырья"];
                this.columnНаименование_сырья = base.Columns["Наименование_сырья"];
                this.columnКоличество_на_складе = base.Columns["Количество_на_складе"];
                this.columnЕдиница_измерения = base.Columns["Единица_измерения"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnКод_сырья = new global::System.Data.DataColumn("Код_сырья", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Код_сырья");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Код_сырьяColumn");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnКод_сырья");
                this.columnКод_сырья.ExtendedProperties.Add("Generator_UserColumnName", "Код_сырья");
                base.Columns.Add(this.columnКод_сырья);
                this.columnНаименование_сырья = new global::System.Data.DataColumn("Наименование_сырья", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаименование_сырья);
                this.columnКоличество_на_складе = new global::System.Data.DataColumn("Количество_на_складе", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество_на_складе);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица_измерения", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Единица_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Единица_измеренияColumn");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnЕдиница_измерения");
                this.columnЕдиница_измерения.ExtendedProperties.Add("Generator_UserColumnName", "Единица_измерения");
                base.Columns.Add(this.columnЕдиница_измерения);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnКод_сырья}, true));
                this.columnКод_сырья.AllowDBNull = false;
                this.columnКод_сырья.Unique = true;
                this.columnНаименование_сырья.AllowDBNull = false;
                this.columnНаименование_сырья.MaxLength = 50;
                this.columnКоличество_на_складе.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМRow NewСклад_СиМRow() {
                return ((Склад_СиМRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Склад_СиМRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Склад_СиМRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Склад_СиМRowChanged != null)) {
                    this.Склад_СиМRowChanged(this, new Склад_СиМRowChangeEvent(((Склад_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Склад_СиМRowChanging != null)) {
                    this.Склад_СиМRowChanging(this, new Склад_СиМRowChangeEvent(((Склад_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Склад_СиМRowDeleted != null)) {
                    this.Склад_СиМRowDeleted(this, new Склад_СиМRowChangeEvent(((Склад_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Склад_СиМRowDeleting != null)) {
                    this.Склад_СиМRowDeleting(this, new Склад_СиМRowChangeEvent(((Склад_СиМRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveСклад_СиМRow(Склад_СиМRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Склад_СиМDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ЦехDataTable : global::System.Data.TypedTableBase<ЦехRow> {
            
            private global::System.Data.DataColumn columnКод_сырья;
            
            private global::System.Data.DataColumn columnНаименование_сырья;
            
            private global::System.Data.DataColumn columnКоличество_поступлений;
            
            private global::System.Data.DataColumn columnЕдиница_измерения;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ЦехDataTable() {
                this.TableName = "Цех";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ЦехDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ЦехDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Код_сырьяColumn {
                get {
                    return this.columnКод_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Наименование_сырьяColumn {
                get {
                    return this.columnНаименование_сырья;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Количество_поступленийColumn {
                get {
                    return this.columnКоличество_поступлений;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataColumn Единица_измеренияColumn {
                get {
                    return this.columnЕдиница_измерения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ЦехRow this[int index] {
                get {
                    return ((ЦехRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ЦехRowChangeEventHandler ЦехRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ЦехRowChangeEventHandler ЦехRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ЦехRowChangeEventHandler ЦехRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ЦехRowChangeEventHandler ЦехRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddЦехRow(ЦехRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ЦехRow AddЦехRow(Склад_СиМRow parentСклад_СиМRowByFK_Цех_Склад_СиМ1, string Наименование_сырья, int Количество_поступлений, string Единица_измерения) {
                ЦехRow rowЦехRow = ((ЦехRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Наименование_сырья,
                        Количество_поступлений,
                        Единица_измерения};
                if ((parentСклад_СиМRowByFK_Цех_Склад_СиМ1 != null)) {
                    columnValuesArray[0] = parentСклад_СиМRowByFK_Цех_Склад_СиМ1[0];
                }
                rowЦехRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowЦехRow);
                return rowЦехRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ЦехRow FindByКод_сырья(int Код_сырья) {
                return ((ЦехRow)(this.Rows.Find(new object[] {
                            Код_сырья})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ЦехDataTable cln = ((ЦехDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ЦехDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars() {
                this.columnКод_сырья = base.Columns["Код сырья"];
                this.columnНаименование_сырья = base.Columns["Наименование сырья"];
                this.columnКоличество_поступлений = base.Columns["Количество поступлений"];
                this.columnЕдиница_измерения = base.Columns["Единица измерения"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass() {
                this.columnКод_сырья = new global::System.Data.DataColumn("Код сырья", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКод_сырья);
                this.columnНаименование_сырья = new global::System.Data.DataColumn("Наименование сырья", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnНаименование_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Наименование_сырья");
                this.columnНаименование_сырья.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Наименование_сырьяColumn");
                this.columnНаименование_сырья.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnНаименование_сырья");
                this.columnНаименование_сырья.ExtendedProperties.Add("Generator_UserColumnName", "Наименование сырья");
                base.Columns.Add(this.columnНаименование_сырья);
                this.columnКоличество_поступлений = new global::System.Data.DataColumn("Количество поступлений", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество_поступлений);
                this.columnЕдиница_измерения = new global::System.Data.DataColumn("Единица измерения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЕдиница_измерения);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnКод_сырья}, true));
                this.columnКод_сырья.AllowDBNull = false;
                this.columnКод_сырья.Unique = true;
                this.columnНаименование_сырья.AllowDBNull = false;
                this.columnНаименование_сырья.MaxLength = 50;
                this.columnКоличество_поступлений.AllowDBNull = false;
                this.columnЕдиница_измерения.AllowDBNull = false;
                this.columnЕдиница_измерения.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ЦехRow NewЦехRow() {
                return ((ЦехRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ЦехRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ЦехRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ЦехRowChanged != null)) {
                    this.ЦехRowChanged(this, new ЦехRowChangeEvent(((ЦехRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ЦехRowChanging != null)) {
                    this.ЦехRowChanging(this, new ЦехRowChangeEvent(((ЦехRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ЦехRowDeleted != null)) {
                    this.ЦехRowDeleted(this, new ЦехRowChangeEvent(((ЦехRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ЦехRowDeleting != null)) {
                    this.ЦехRowDeleting(this, new ЦехRowChangeEvent(((ЦехRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveЦехRow(ЦехRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                СкладDataSet ds = new СкладDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ЦехDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Готовая_продукцияRow : global::System.Data.DataRow {
            
            private Готовая_продукцияDataTable tableГотовая_продукция;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Готовая_продукцияRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableГотовая_продукция = ((Готовая_продукцияDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_товара {
                get {
                    return ((int)(this[this.tableГотовая_продукция.Код_товараColumn]));
                }
                set {
                    this[this.tableГотовая_продукция.Код_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_товара {
                get {
                    return ((string)(this[this.tableГотовая_продукция.Наименование_товараColumn]));
                }
                set {
                    this[this.tableГотовая_продукция.Наименование_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Количество_изготовлений {
                get {
                    return ((int)(this[this.tableГотовая_продукция.Количество_изготовленийColumn]));
                }
                set {
                    this[this.tableГотовая_продукция.Количество_изготовленийColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableГотовая_продукция.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableГотовая_продукция.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_сырья {
                get {
                    try {
                        return ((int)(this[this.tableГотовая_продукция.Код_сырьяColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Код сырья\' в таблице \'Готовая продукция\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableГотовая_продукция.Код_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ЦехRow ЦехRow {
                get {
                    return ((ЦехRow)(this.GetParentRow(this.Table.ParentRelations["FK_Готовая продукция_Цех"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Готовая продукция_Цех"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsКод_сырьяNull() {
                return this.IsNull(this.tableГотовая_продукция.Код_сырьяColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetКод_сырьяNull() {
                this[this.tableГотовая_продукция.Код_сырьяColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_готовой_продукцииRow[] GetОперации_по_готовой_продукцииRows() {
                if ((this.Table.ChildRelations["FK_Операции по готовой продукции_Готовая продукция"] == null)) {
                    return new Операции_по_готовой_продукцииRow[0];
                }
                else {
                    return ((Операции_по_готовой_продукцииRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Операции по готовой продукции_Готовая продукция"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПRow[] GetСклад_ГПRows() {
                if ((this.Table.ChildRelations["FK_Склад ГП_Готовая продукция"] == null)) {
                    return new Склад_ГПRow[0];
                }
                else {
                    return ((Склад_ГПRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Склад ГП_Готовая продукция"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Заказчик_ГПRow : global::System.Data.DataRow {
            
            private Заказчик_ГПDataTable tableЗаказчик_ГП;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Заказчик_ГПRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableЗаказчик_ГП = ((Заказчик_ГПDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Номер_заказа {
                get {
                    return ((int)(this[this.tableЗаказчик_ГП.Номер_заказаColumn]));
                }
                set {
                    this[this.tableЗаказчик_ГП.Номер_заказаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_заказчика {
                get {
                    return ((string)(this[this.tableЗаказчик_ГП.Наименование_заказчикаColumn]));
                }
                set {
                    this[this.tableЗаказчик_ГП.Наименование_заказчикаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_товара {
                get {
                    return ((string)(this[this.tableЗаказчик_ГП.Наименование_товараColumn]));
                }
                set {
                    this[this.tableЗаказчик_ГП.Наименование_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Количество {
                get {
                    return ((int)(this[this.tableЗаказчик_ГП.КоличествоColumn]));
                }
                set {
                    this[this.tableЗаказчик_ГП.КоличествоColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableЗаказчик_ГП.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableЗаказчик_ГП.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Адрес {
                get {
                    return ((string)(this[this.tableЗаказчик_ГП.АдресColumn]));
                }
                set {
                    this[this.tableЗаказчик_ГП.АдресColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Телефон {
                get {
                    return ((string)(this[this.tableЗаказчик_ГП.ТелефонColumn]));
                }
                set {
                    this[this.tableЗаказчик_ГП.ТелефонColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Заказ_закрыт {
                get {
                    try {
                        return ((bool)(this[this.tableЗаказчик_ГП.Заказ_закрытColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Заказ_закрыт\' в таблице \'Заказчик ГП\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableЗаказчик_ГП.Заказ_закрытColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_товара {
                get {
                    try {
                        return ((int)(this[this.tableЗаказчик_ГП.Код_товараColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Код_товара\' в таблице \'Заказчик ГП\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableЗаказчик_ГП.Код_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПRow Склад_ГПRow {
                get {
                    return ((Склад_ГПRow)(this.GetParentRow(this.Table.ParentRelations["FK_Заказчик ГП_Склад ГП"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Заказчик ГП_Склад ГП"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsЗаказ_закрытNull() {
                return this.IsNull(this.tableЗаказчик_ГП.Заказ_закрытColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetЗаказ_закрытNull() {
                this[this.tableЗаказчик_ГП.Заказ_закрытColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsКод_товараNull() {
                return this.IsNull(this.tableЗаказчик_ГП.Код_товараColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetКод_товараNull() {
                this[this.tableЗаказчик_ГП.Код_товараColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Информация_по_товарамRow : global::System.Data.DataRow {
            
            private Информация_по_товарамDataTable tableИнформация_по_товарам;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Информация_по_товарамRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableИнформация_по_товарам = ((Информация_по_товарамDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_товара {
                get {
                    return ((int)(this[this.tableИнформация_по_товарам.Код_товараColumn]));
                }
                set {
                    this[this.tableИнформация_по_товарам.Код_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_сырья {
                get {
                    return ((int)(this[this.tableИнформация_по_товарам.Код_сырьяColumn]));
                }
                set {
                    this[this.tableИнформация_по_товарам.Код_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Количество_сырья_необходимое_для_производства_данного_товара {
                get {
                    return ((int)(this[this.tableИнформация_по_товарам.Количество_сырья_необходимое_для_производства_данного_товараColumn]));
                }
                set {
                    this[this.tableИнформация_по_товарам.Количество_сырья_необходимое_для_производства_данного_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableИнформация_по_товарам.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableИнформация_по_товарам.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПRow Склад_ГПRow {
                get {
                    return ((Склад_ГПRow)(this.GetParentRow(this.Table.ParentRelations["FK_Информация по товарам_Склад ГП"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Информация по товарам_Склад ГП"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМRow Склад_СиМRow {
                get {
                    return ((Склад_СиМRow)(this.GetParentRow(this.Table.ParentRelations["FK_Информация по товарам_Склад СиМ"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Информация по товарам_Склад СиМ"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Операции_по_готовой_продукцииRow : global::System.Data.DataRow {
            
            private Операции_по_готовой_продукцииDataTable tableОперации_по_готовой_продукции;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Операции_по_готовой_продукцииRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableОперации_по_готовой_продукции = ((Операции_по_готовой_продукцииDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Номер_операции {
                get {
                    return ((int)(this[this.tableОперации_по_готовой_продукции.Номер_операцииColumn]));
                }
                set {
                    this[this.tableОперации_по_готовой_продукции.Номер_операцииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_товара {
                get {
                    return ((int)(this[this.tableОперации_по_готовой_продукции.Код_товараColumn]));
                }
                set {
                    this[this.tableОперации_по_готовой_продукции.Код_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_товара {
                get {
                    return ((string)(this[this.tableОперации_по_готовой_продукции.Наименование_товараColumn]));
                }
                set {
                    this[this.tableОперации_по_готовой_продукции.Наименование_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Статус {
                get {
                    return ((string)(this[this.tableОперации_по_готовой_продукции.СтатусColumn]));
                }
                set {
                    this[this.tableОперации_по_готовой_продукции.СтатусColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime Дата {
                get {
                    return ((global::System.DateTime)(this[this.tableОперации_по_готовой_продукции.ДатаColumn]));
                }
                set {
                    this[this.tableОперации_по_готовой_продукции.ДатаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Количество {
                get {
                    return ((int)(this[this.tableОперации_по_готовой_продукции.КоличествоColumn]));
                }
                set {
                    this[this.tableОперации_по_готовой_продукции.КоличествоColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableОперации_по_готовой_продукции.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableОперации_по_готовой_продукции.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Готовая_продукцияRow Готовая_продукцияRow {
                get {
                    return ((Готовая_продукцияRow)(this.GetParentRow(this.Table.ParentRelations["FK_Операции по готовой продукции_Готовая продукция"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Операции по готовой продукции_Готовая продукция"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Операции_по_складу_ГПRow : global::System.Data.DataRow {
            
            private Операции_по_складу_ГПDataTable tableОперации_по_складу_ГП;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Операции_по_складу_ГПRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableОперации_по_складу_ГП = ((Операции_по_складу_ГПDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Номер_операции {
                get {
                    return ((int)(this[this.tableОперации_по_складу_ГП.Номер_операцииColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_ГП.Номер_операцииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_товара {
                get {
                    return ((int)(this[this.tableОперации_по_складу_ГП.Код_товараColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_ГП.Код_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_товара {
                get {
                    return ((string)(this[this.tableОперации_по_складу_ГП.Наименование_товараColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_ГП.Наименование_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Статус {
                get {
                    return ((string)(this[this.tableОперации_по_складу_ГП.СтатусColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_ГП.СтатусColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime Дата {
                get {
                    return ((global::System.DateTime)(this[this.tableОперации_по_складу_ГП.ДатаColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_ГП.ДатаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Количество {
                get {
                    return ((int)(this[this.tableОперации_по_складу_ГП.КоличествоColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_ГП.КоличествоColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableОперации_по_складу_ГП.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_ГП.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПRow Склад_ГПRow {
                get {
                    return ((Склад_ГПRow)(this.GetParentRow(this.Table.ParentRelations["FK_Операции по складу ГП_Склад ГП"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Операции по складу ГП_Склад ГП"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Операции_по_складу_СиМRow : global::System.Data.DataRow {
            
            private Операции_по_складу_СиМDataTable tableОперации_по_складу_СиМ;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Операции_по_складу_СиМRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableОперации_по_складу_СиМ = ((Операции_по_складу_СиМDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Номер_операции {
                get {
                    return ((int)(this[this.tableОперации_по_складу_СиМ.Номер_операцииColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_СиМ.Номер_операцииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_сырья {
                get {
                    return ((int)(this[this.tableОперации_по_складу_СиМ.Код_сырьяColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_СиМ.Код_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_сырья {
                get {
                    return ((string)(this[this.tableОперации_по_складу_СиМ.Наименование_сырьяColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_СиМ.Наименование_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Статус {
                get {
                    return ((string)(this[this.tableОперации_по_складу_СиМ.СтатусColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_СиМ.СтатусColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime Дата {
                get {
                    return ((global::System.DateTime)(this[this.tableОперации_по_складу_СиМ.ДатаColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_СиМ.ДатаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Количество {
                get {
                    return ((int)(this[this.tableОперации_по_складу_СиМ.КоличествоColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_СиМ.КоличествоColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableОперации_по_складу_СиМ.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableОперации_по_складу_СиМ.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМRow Склад_СиМRow {
                get {
                    return ((Склад_СиМRow)(this.GetParentRow(this.Table.ParentRelations["FK_Операции по складу СиМ_Склад СиМ"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Операции по складу СиМ_Склад СиМ"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Операции_по_цехуRow : global::System.Data.DataRow {
            
            private Операции_по_цехуDataTable tableОперации_по_цеху;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Операции_по_цехуRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableОперации_по_цеху = ((Операции_по_цехуDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Номер_операции {
                get {
                    return ((int)(this[this.tableОперации_по_цеху.Номер_операцииColumn]));
                }
                set {
                    this[this.tableОперации_по_цеху.Номер_операцииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_сырья {
                get {
                    return ((int)(this[this.tableОперации_по_цеху.Код_сырьяColumn]));
                }
                set {
                    this[this.tableОперации_по_цеху.Код_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_сырья {
                get {
                    return ((string)(this[this.tableОперации_по_цеху.Наименование_сырьяColumn]));
                }
                set {
                    this[this.tableОперации_по_цеху.Наименование_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Статус {
                get {
                    return ((string)(this[this.tableОперации_по_цеху.СтатусColumn]));
                }
                set {
                    this[this.tableОперации_по_цеху.СтатусColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public System.DateTime Дата {
                get {
                    return ((global::System.DateTime)(this[this.tableОперации_по_цеху.ДатаColumn]));
                }
                set {
                    this[this.tableОперации_по_цеху.ДатаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Количество {
                get {
                    return ((int)(this[this.tableОперации_по_цеху.КоличествоColumn]));
                }
                set {
                    this[this.tableОперации_по_цеху.КоличествоColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableОперации_по_цеху.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableОперации_по_цеху.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ЦехRow ЦехRow {
                get {
                    return ((ЦехRow)(this.GetParentRow(this.Table.ParentRelations["FK_Операции по цеху_Цех"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Операции по цеху_Цех"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Поставщик_СиМRow : global::System.Data.DataRow {
            
            private Поставщик_СиМDataTable tableПоставщик_СиМ;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Поставщик_СиМRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПоставщик_СиМ = ((Поставщик_СиМDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_поставщика {
                get {
                    return ((int)(this[this.tableПоставщик_СиМ.Код_поставщикаColumn]));
                }
                set {
                    this[this.tableПоставщик_СиМ.Код_поставщикаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_организации {
                get {
                    return ((string)(this[this.tableПоставщик_СиМ.Наименование_организацииColumn]));
                }
                set {
                    this[this.tableПоставщик_СиМ.Наименование_организацииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_сырья {
                get {
                    return ((int)(this[this.tableПоставщик_СиМ.Код_сырьяColumn]));
                }
                set {
                    this[this.tableПоставщик_СиМ.Код_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_сырья {
                get {
                    return ((string)(this[this.tableПоставщик_СиМ.Наименование_сырьяColumn]));
                }
                set {
                    this[this.tableПоставщик_СиМ.Наименование_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public decimal Стоимость {
                get {
                    return ((decimal)(this[this.tableПоставщик_СиМ.СтоимостьColumn]));
                }
                set {
                    this[this.tableПоставщик_СиМ.СтоимостьColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableПоставщик_СиМ.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableПоставщик_СиМ.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Адрес_организации {
                get {
                    return ((string)(this[this.tableПоставщик_СиМ.Адрес_организацииColumn]));
                }
                set {
                    this[this.tableПоставщик_СиМ.Адрес_организацииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Телефон {
                get {
                    return ((string)(this[this.tableПоставщик_СиМ.ТелефонColumn]));
                }
                set {
                    this[this.tableПоставщик_СиМ.ТелефонColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМRow Склад_СиМRow {
                get {
                    return ((Склад_СиМRow)(this.GetParentRow(this.Table.ParentRelations["FK_Поставщик СиМ_Склад СиМ"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Поставщик СиМ_Склад СиМ"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Склад_ГПRow : global::System.Data.DataRow {
            
            private Склад_ГПDataTable tableСклад_ГП;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Склад_ГПRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableСклад_ГП = ((Склад_ГПDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_товара {
                get {
                    return ((int)(this[this.tableСклад_ГП.Код_товараColumn]));
                }
                set {
                    this[this.tableСклад_ГП.Код_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_товара {
                get {
                    return ((string)(this[this.tableСклад_ГП.Наименование_товараColumn]));
                }
                set {
                    this[this.tableСклад_ГП.Наименование_товараColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Количество_на_складе {
                get {
                    return ((int)(this[this.tableСклад_ГП.Количество_на_складеColumn]));
                }
                set {
                    this[this.tableСклад_ГП.Количество_на_складеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableСклад_ГП.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableСклад_ГП.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Готовая_продукцияRow Готовая_продукцияRow {
                get {
                    return ((Готовая_продукцияRow)(this.GetParentRow(this.Table.ParentRelations["FK_Склад ГП_Готовая продукция"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Склад ГП_Готовая продукция"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Заказчик_ГПRow[] GetЗаказчик_ГПRows() {
                if ((this.Table.ChildRelations["FK_Заказчик ГП_Склад ГП"] == null)) {
                    return new Заказчик_ГПRow[0];
                }
                else {
                    return ((Заказчик_ГПRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Заказчик ГП_Склад ГП"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Информация_по_товарамRow[] GetИнформация_по_товарамRows() {
                if ((this.Table.ChildRelations["FK_Информация по товарам_Склад ГП"] == null)) {
                    return new Информация_по_товарамRow[0];
                }
                else {
                    return ((Информация_по_товарамRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Информация по товарам_Склад ГП"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_ГПRow[] GetОперации_по_складу_ГПRows() {
                if ((this.Table.ChildRelations["FK_Операции по складу ГП_Склад ГП"] == null)) {
                    return new Операции_по_складу_ГПRow[0];
                }
                else {
                    return ((Операции_по_складу_ГПRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Операции по складу ГП_Склад ГП"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Склад_СиМRow : global::System.Data.DataRow {
            
            private Склад_СиМDataTable tableСклад_СиМ;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal Склад_СиМRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableСклад_СиМ = ((Склад_СиМDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_сырья {
                get {
                    return ((int)(this[this.tableСклад_СиМ.Код_сырьяColumn]));
                }
                set {
                    this[this.tableСклад_СиМ.Код_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_сырья {
                get {
                    return ((string)(this[this.tableСклад_СиМ.Наименование_сырьяColumn]));
                }
                set {
                    this[this.tableСклад_СиМ.Наименование_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Количество_на_складе {
                get {
                    return ((int)(this[this.tableСклад_СиМ.Количество_на_складеColumn]));
                }
                set {
                    this[this.tableСклад_СиМ.Количество_на_складеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableСклад_СиМ.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableСклад_СиМ.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Информация_по_товарамRow[] GetИнформация_по_товарамRows() {
                if ((this.Table.ChildRelations["FK_Информация по товарам_Склад СиМ"] == null)) {
                    return new Информация_по_товарамRow[0];
                }
                else {
                    return ((Информация_по_товарамRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Информация по товарам_Склад СиМ"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_СиМRow[] GetОперации_по_складу_СиМRows() {
                if ((this.Table.ChildRelations["FK_Операции по складу СиМ_Склад СиМ"] == null)) {
                    return new Операции_по_складу_СиМRow[0];
                }
                else {
                    return ((Операции_по_складу_СиМRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Операции по складу СиМ_Склад СиМ"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Поставщик_СиМRow[] GetПоставщик_СиМRows() {
                if ((this.Table.ChildRelations["FK_Поставщик СиМ_Склад СиМ"] == null)) {
                    return new Поставщик_СиМRow[0];
                }
                else {
                    return ((Поставщик_СиМRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Поставщик СиМ_Склад СиМ"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ЦехRow[] GetЦехRows() {
                if ((this.Table.ChildRelations["FK_Цех_Склад СиМ1"] == null)) {
                    return new ЦехRow[0];
                }
                else {
                    return ((ЦехRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Цех_Склад СиМ1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ЦехRow : global::System.Data.DataRow {
            
            private ЦехDataTable tableЦех;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ЦехRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableЦех = ((ЦехDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Код_сырья {
                get {
                    return ((int)(this[this.tableЦех.Код_сырьяColumn]));
                }
                set {
                    this[this.tableЦех.Код_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Наименование_сырья {
                get {
                    return ((string)(this[this.tableЦех.Наименование_сырьяColumn]));
                }
                set {
                    this[this.tableЦех.Наименование_сырьяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Количество_поступлений {
                get {
                    return ((int)(this[this.tableЦех.Количество_поступленийColumn]));
                }
                set {
                    this[this.tableЦех.Количество_поступленийColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string Единица_измерения {
                get {
                    return ((string)(this[this.tableЦех.Единица_измеренияColumn]));
                }
                set {
                    this[this.tableЦех.Единица_измеренияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМRow Склад_СиМRow {
                get {
                    return ((Склад_СиМRow)(this.GetParentRow(this.Table.ParentRelations["FK_Цех_Склад СиМ1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Цех_Склад СиМ1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Готовая_продукцияRow[] GetГотовая_продукцияRows() {
                if ((this.Table.ChildRelations["FK_Готовая продукция_Цех"] == null)) {
                    return new Готовая_продукцияRow[0];
                }
                else {
                    return ((Готовая_продукцияRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Готовая продукция_Цех"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_цехуRow[] GetОперации_по_цехуRows() {
                if ((this.Table.ChildRelations["FK_Операции по цеху_Цех"] == null)) {
                    return new Операции_по_цехуRow[0];
                }
                else {
                    return ((Операции_по_цехуRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Операции по цеху_Цех"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Готовая_продукцияRowChangeEvent : global::System.EventArgs {
            
            private Готовая_продукцияRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Готовая_продукцияRowChangeEvent(Готовая_продукцияRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Готовая_продукцияRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Заказчик_ГПRowChangeEvent : global::System.EventArgs {
            
            private Заказчик_ГПRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Заказчик_ГПRowChangeEvent(Заказчик_ГПRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Заказчик_ГПRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Информация_по_товарамRowChangeEvent : global::System.EventArgs {
            
            private Информация_по_товарамRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Информация_по_товарамRowChangeEvent(Информация_по_товарамRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Информация_по_товарамRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Операции_по_готовой_продукцииRowChangeEvent : global::System.EventArgs {
            
            private Операции_по_готовой_продукцииRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_готовой_продукцииRowChangeEvent(Операции_по_готовой_продукцииRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_готовой_продукцииRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Операции_по_складу_ГПRowChangeEvent : global::System.EventArgs {
            
            private Операции_по_складу_ГПRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_ГПRowChangeEvent(Операции_по_складу_ГПRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_ГПRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Операции_по_складу_СиМRowChangeEvent : global::System.EventArgs {
            
            private Операции_по_складу_СиМRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_СиМRowChangeEvent(Операции_по_складу_СиМRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_складу_СиМRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Операции_по_цехуRowChangeEvent : global::System.EventArgs {
            
            private Операции_по_цехуRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_цехуRowChangeEvent(Операции_по_цехуRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Операции_по_цехуRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Поставщик_СиМRowChangeEvent : global::System.EventArgs {
            
            private Поставщик_СиМRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Поставщик_СиМRowChangeEvent(Поставщик_СиМRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Поставщик_СиМRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Склад_ГПRowChangeEvent : global::System.EventArgs {
            
            private Склад_ГПRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПRowChangeEvent(Склад_ГПRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_ГПRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class Склад_СиМRowChangeEvent : global::System.EventArgs {
            
            private Склад_СиМRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМRowChangeEvent(Склад_СиМRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Склад_СиМRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ЦехRowChangeEvent : global::System.EventArgs {
            
            private ЦехRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ЦехRowChangeEvent(ЦехRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ЦехRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Storage.СкладDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Готовая_продукцияTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Готовая_продукцияTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Готовая продукция";
            tableMapping.ColumnMappings.Add("Код товара", "Код товара");
            tableMapping.ColumnMappings.Add("Наименование товара", "Наименование товара");
            tableMapping.ColumnMappings.Add("Количество изготовлений", "Количество изготовлений");
            tableMapping.ColumnMappings.Add("Единица измерения", "Единица измерения");
            tableMapping.ColumnMappings.Add("Код сырья", "Код сырья");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Готовая продукция] WHERE (([Код товара] = @Original_Код_товара) AND ([Наименование товара] = @Original_Наименование_товара) AND ([Количество изготовлений] = @Original_Количество_изготовлений) AND ([Единица измерения] = @Original_Единица_измерения) AND ((@IsNull_Код_сырья = 1 AND [Код сырья] IS NULL) OR ([Код сырья] = @Original_Код_сырья)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_изготовлений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество изготовлений", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код сырья", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Готовая продукция] ([Код товара], [Наименование товара], [Количество изготовлений], [Единица измерения], [Код сырья]) VALUES (@Код_товара, @Наименование_товара, @Количество_изготовлений, @Единица_измерения, @Код_сырья);
SELECT [Код товара], [Наименование товара], [Количество изготовлений], [Единица измерения], [Код сырья] FROM [Готовая продукция] WHERE ([Код товара] = @Код_товара)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_изготовлений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество изготовлений", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Готовая продукция] SET [Код товара] = @Код_товара, [Наименование товара] = @Наименование_товара, [Количество изготовлений] = @Количество_изготовлений, [Единица измерения] = @Единица_измерения, [Код сырья] = @Код_сырья WHERE (([Код товара] = @Original_Код_товара) AND ([Наименование товара] = @Original_Наименование_товара) AND ([Количество изготовлений] = @Original_Количество_изготовлений) AND ([Единица измерения] = @Original_Единица_измерения) AND ((@IsNull_Код_сырья = 1 AND [Код сырья] IS NULL) OR ([Код сырья] = @Original_Код_сырья)));
SELECT [Код товара], [Наименование товара], [Количество изготовлений], [Единица измерения], [Код сырья] FROM [Готовая продукция] WHERE ([Код товара] = @Код_товара)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_изготовлений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество изготовлений", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_изготовлений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество изготовлений", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код сырья", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Код товара], [Наименование товара], [Количество изготовлений], [Единица и" +
                "змерения], [Код сырья] FROM dbo.[Готовая продукция]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.Готовая_продукцияDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.Готовая_продукцияDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.Готовая_продукцияDataTable dataTable = new СкладDataSet.Готовая_продукцияDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.Готовая_продукцияDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Готовая продукция");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Код_товара, string Original_Наименование_товара, int Original_Количество_изготовлений, string Original_Единица_измерения, global::System.Nullable<int> Original_Код_сырья) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Код_товара));
            if ((Original_Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_товара");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Наименование_товара));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Количество_изготовлений));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Единица_измерения));
            }
            if ((Original_Код_сырья.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Код_сырья.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Код_товара, string Наименование_товара, int Количество_изготовлений, string Единица_измерения, global::System.Nullable<int> Код_сырья) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Код_товара));
            if ((Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Наименование_товара");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Наименование_товара));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Количество_изготовлений));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            if ((Код_сырья.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Код_сырья.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Код_товара, string Наименование_товара, int Количество_изготовлений, string Единица_измерения, global::System.Nullable<int> Код_сырья, int Original_Код_товара, string Original_Наименование_товара, int Original_Количество_изготовлений, string Original_Единица_измерения, global::System.Nullable<int> Original_Код_сырья) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Код_товара));
            if ((Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Наименование_товара");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Наименование_товара));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Количество_изготовлений));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            if ((Код_сырья.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Код_сырья.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_Код_товара));
            if ((Original_Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_товара");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Наименование_товара));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_Количество_изготовлений));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Единица_измерения));
            }
            if ((Original_Код_сырья.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Код_сырья.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Наименование_товара, int Количество_изготовлений, string Единица_измерения, global::System.Nullable<int> Код_сырья, int Original_Код_товара, string Original_Наименование_товара, int Original_Количество_изготовлений, string Original_Единица_измерения, global::System.Nullable<int> Original_Код_сырья) {
            return this.Update(Original_Код_товара, Наименование_товара, Количество_изготовлений, Единица_измерения, Код_сырья, Original_Код_товара, Original_Наименование_товара, Original_Количество_изготовлений, Original_Единица_измерения, Original_Код_сырья);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Заказчик_ГПTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Заказчик_ГПTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Заказчик ГП";
            tableMapping.ColumnMappings.Add("Номер_заказа", "Номер_заказа");
            tableMapping.ColumnMappings.Add("Наименование_заказчика", "Наименование_заказчика");
            tableMapping.ColumnMappings.Add("Наименование_товара", "Наименование_товара");
            tableMapping.ColumnMappings.Add("Количество", "Количество");
            tableMapping.ColumnMappings.Add("Единица_измерения", "Единица_измерения");
            tableMapping.ColumnMappings.Add("Адрес", "Адрес");
            tableMapping.ColumnMappings.Add("Телефон", "Телефон");
            tableMapping.ColumnMappings.Add("Заказ_закрыт", "Заказ_закрыт");
            tableMapping.ColumnMappings.Add("Код_товара", "Код_товара");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Заказчик ГП] WHERE (([Номер_заказа] = @Original_Номер_заказа) AND ([Наименование_заказчика] = @Original_Наименование_заказчика) AND ([Наименование_товара] = @Original_Наименование_товара) AND ([Количество] = @Original_Количество) AND ([Единица_измерения] = @Original_Единица_измерения) AND ([Адрес] = @Original_Адрес) AND ([Телефон] = @Original_Телефон) AND ((@IsNull_Заказ_закрыт = 1 AND [Заказ_закрыт] IS NULL) OR ([Заказ_закрыт] = @Original_Заказ_закрыт)) AND ((@IsNull_Код_товара = 1 AND [Код_товара] IS NULL) OR ([Код_товара] = @Original_Код_товара)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_заказа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_заказа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_заказчика", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_заказчика", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Адрес", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Телефон", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Заказ_закрыт", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Заказ_закрыт", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Заказ_закрыт", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Заказ_закрыт", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Заказчик ГП] ([Наименование_заказчика], [Наименование_товара], [Количество], [Единица_измерения], [Адрес], [Телефон], [Заказ_закрыт], [Код_товара]) VALUES (@Наименование_заказчика, @Наименование_товара, @Количество, @Единица_измерения, @Адрес, @Телефон, @Заказ_закрыт, @Код_товара);
SELECT Номер_заказа, Наименование_заказчика, Наименование_товара, Количество, Единица_измерения, Адрес, Телефон, Заказ_закрыт, Код_товара FROM [Заказчик ГП] WHERE (Номер_заказа = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_заказчика", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_заказчика", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Адрес", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Телефон", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Заказ_закрыт", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Заказ_закрыт", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Заказчик ГП] SET [Наименование_заказчика] = @Наименование_заказчика, [Наименование_товара] = @Наименование_товара, [Количество] = @Количество, [Единица_измерения] = @Единица_измерения, [Адрес] = @Адрес, [Телефон] = @Телефон, [Заказ_закрыт] = @Заказ_закрыт, [Код_товара] = @Код_товара WHERE (([Номер_заказа] = @Original_Номер_заказа) AND ([Наименование_заказчика] = @Original_Наименование_заказчика) AND ([Наименование_товара] = @Original_Наименование_товара) AND ([Количество] = @Original_Количество) AND ([Единица_измерения] = @Original_Единица_измерения) AND ([Адрес] = @Original_Адрес) AND ([Телефон] = @Original_Телефон) AND ((@IsNull_Заказ_закрыт = 1 AND [Заказ_закрыт] IS NULL) OR ([Заказ_закрыт] = @Original_Заказ_закрыт)) AND ((@IsNull_Код_товара = 1 AND [Код_товара] IS NULL) OR ([Код_товара] = @Original_Код_товара)));
SELECT Номер_заказа, Наименование_заказчика, Наименование_товара, Количество, Единица_измерения, Адрес, Телефон, Заказ_закрыт, Код_товара FROM [Заказчик ГП] WHERE (Номер_заказа = @Номер_заказа)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_заказчика", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_заказчика", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Адрес", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Телефон", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Заказ_закрыт", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Заказ_закрыт", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_заказа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_заказа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_заказчика", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_заказчика", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Адрес", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Телефон", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Заказ_закрыт", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Заказ_закрыт", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Заказ_закрыт", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Заказ_закрыт", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_заказа", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_заказа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Номер_заказа, Наименование_заказчика, Наименование_товара, Количество, Еди" +
                "ница_измерения, Адрес, Телефон, Заказ_закрыт, Код_товара FROM dbo.[Заказчик ГП]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.Заказчик_ГПDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.Заказчик_ГПDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.Заказчик_ГПDataTable dataTable = new СкладDataSet.Заказчик_ГПDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.Заказчик_ГПDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Заказчик ГП");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Номер_заказа, string Original_Наименование_заказчика, string Original_Наименование_товара, int Original_Количество, string Original_Единица_измерения, string Original_Адрес, string Original_Телефон, global::System.Nullable<bool> Original_Заказ_закрыт, global::System.Nullable<int> Original_Код_товара) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Номер_заказа));
            if ((Original_Наименование_заказчика == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_заказчика");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Наименование_заказчика));
            }
            if ((Original_Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_товара");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Наименование_товара));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Количество));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Единица_измерения));
            }
            if ((Original_Адрес == null)) {
                throw new global::System.ArgumentNullException("Original_Адрес");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Адрес));
            }
            if ((Original_Телефон == null)) {
                throw new global::System.ArgumentNullException("Original_Телефон");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Телефон));
            }
            if ((Original_Заказ_закрыт.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_Заказ_закрыт.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_Код_товара.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_Код_товара.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Наименование_заказчика, string Наименование_товара, int Количество, string Единица_измерения, string Адрес, string Телефон, global::System.Nullable<bool> Заказ_закрыт, global::System.Nullable<int> Код_товара) {
            if ((Наименование_заказчика == null)) {
                throw new global::System.ArgumentNullException("Наименование_заказчика");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Наименование_заказчика));
            }
            if ((Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Наименование_товара");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Наименование_товара));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Количество));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            if ((Адрес == null)) {
                throw new global::System.ArgumentNullException("Адрес");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Адрес));
            }
            if ((Телефон == null)) {
                throw new global::System.ArgumentNullException("Телефон");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Телефон));
            }
            if ((Заказ_закрыт.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(Заказ_закрыт.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Код_товара.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(Код_товара.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Наименование_заказчика, 
                    string Наименование_товара, 
                    int Количество, 
                    string Единица_измерения, 
                    string Адрес, 
                    string Телефон, 
                    global::System.Nullable<bool> Заказ_закрыт, 
                    global::System.Nullable<int> Код_товара, 
                    int Original_Номер_заказа, 
                    string Original_Наименование_заказчика, 
                    string Original_Наименование_товара, 
                    int Original_Количество, 
                    string Original_Единица_измерения, 
                    string Original_Адрес, 
                    string Original_Телефон, 
                    global::System.Nullable<bool> Original_Заказ_закрыт, 
                    global::System.Nullable<int> Original_Код_товара, 
                    int Номер_заказа) {
            if ((Наименование_заказчика == null)) {
                throw new global::System.ArgumentNullException("Наименование_заказчика");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Наименование_заказчика));
            }
            if ((Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Наименование_товара");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Наименование_товара));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Количество));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            if ((Адрес == null)) {
                throw new global::System.ArgumentNullException("Адрес");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Адрес));
            }
            if ((Телефон == null)) {
                throw new global::System.ArgumentNullException("Телефон");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Телефон));
            }
            if ((Заказ_закрыт.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Заказ_закрыт.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Код_товара.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Код_товара.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Номер_заказа));
            if ((Original_Наименование_заказчика == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_заказчика");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Наименование_заказчика));
            }
            if ((Original_Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_товара");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Наименование_товара));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_Количество));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Единица_измерения));
            }
            if ((Original_Адрес == null)) {
                throw new global::System.ArgumentNullException("Original_Адрес");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Адрес));
            }
            if ((Original_Телефон == null)) {
                throw new global::System.ArgumentNullException("Original_Телефон");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Телефон));
            }
            if ((Original_Заказ_закрыт.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((bool)(Original_Заказ_закрыт.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_Код_товара.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_Код_товара.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Номер_заказа));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Наименование_заказчика, 
                    string Наименование_товара, 
                    int Количество, 
                    string Единица_измерения, 
                    string Адрес, 
                    string Телефон, 
                    global::System.Nullable<bool> Заказ_закрыт, 
                    global::System.Nullable<int> Код_товара, 
                    int Original_Номер_заказа, 
                    string Original_Наименование_заказчика, 
                    string Original_Наименование_товара, 
                    int Original_Количество, 
                    string Original_Единица_измерения, 
                    string Original_Адрес, 
                    string Original_Телефон, 
                    global::System.Nullable<bool> Original_Заказ_закрыт, 
                    global::System.Nullable<int> Original_Код_товара) {
            return this.Update(Наименование_заказчика, Наименование_товара, Количество, Единица_измерения, Адрес, Телефон, Заказ_закрыт, Код_товара, Original_Номер_заказа, Original_Наименование_заказчика, Original_Наименование_товара, Original_Количество, Original_Единица_измерения, Original_Адрес, Original_Телефон, Original_Заказ_закрыт, Original_Код_товара, Original_Номер_заказа);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Информация_по_товарамTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Информация_по_товарамTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Информация по товарам";
            tableMapping.ColumnMappings.Add("Код_товара", "Код_товара");
            tableMapping.ColumnMappings.Add("Код_сырья", "Код_сырья");
            tableMapping.ColumnMappings.Add("Количество_сырья_необходимое_для_производства_данного_товара", "Количество_сырья_необходимое_для_производства_данного_товара");
            tableMapping.ColumnMappings.Add("Единица_измерения", "Единица_измерения");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Информация по товарам] WHERE (([Код_товара] = @Original_Код_товара) AND ([Код_сырья] = @Original_Код_сырья) AND ([Количество_сырья_необходимое_для_производства_данного_товара] = @Original_Количество_сырья_необходимое_для_производства_данного_товара) AND ([Единица_измерения] = @Original_Единица_измерения))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_сырья_необходимое_для_производства_данного_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_сырья_необходимое_для_производства_данного_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Информация по товарам] ([Код_товара], [Код_сырья], [Количество_сырья_необходимое_для_производства_данного_товара], [Единица_измерения]) VALUES (@Код_товара, @Код_сырья, @Количество_сырья_необходимое_для_производства_данного_товара, @Единица_измерения);
SELECT Код_товара, Код_сырья, Количество_сырья_необходимое_для_производства_данного_товара, Единица_измерения FROM [Информация по товарам] WHERE (Код_сырья = @Код_сырья) AND (Код_товара = @Код_товара)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_сырья_необходимое_для_производства_данного_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_сырья_необходимое_для_производства_данного_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Информация по товарам] SET [Код_товара] = @Код_товара, [Код_сырья] = @Код_сырья, [Количество_сырья_необходимое_для_производства_данного_товара] = @Количество_сырья_необходимое_для_производства_данного_товара, [Единица_измерения] = @Единица_измерения WHERE (([Код_товара] = @Original_Код_товара) AND ([Код_сырья] = @Original_Код_сырья) AND ([Количество_сырья_необходимое_для_производства_данного_товара] = @Original_Количество_сырья_необходимое_для_производства_данного_товара) AND ([Единица_измерения] = @Original_Единица_измерения));
SELECT Код_товара, Код_сырья, Количество_сырья_необходимое_для_производства_данного_товара, Единица_измерения FROM [Информация по товарам] WHERE (Код_сырья = @Код_сырья) AND (Код_товара = @Код_товара)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_сырья_необходимое_для_производства_данного_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_сырья_необходимое_для_производства_данного_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_сырья_необходимое_для_производства_данного_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_сырья_необходимое_для_производства_данного_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Код_товара, Код_сырья, Количество_сырья_необходимое_для_производства_данно" +
                "го_товара, Единица_измерения FROM dbo.[Информация по товарам]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.Информация_по_товарамDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.Информация_по_товарамDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.Информация_по_товарамDataTable dataTable = new СкладDataSet.Информация_по_товарамDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.Информация_по_товарамDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Информация по товарам");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Код_товара, int Original_Код_сырья, int Original_Количество_сырья_необходимое_для_производства_данного_товара, string Original_Единица_измерения) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Код_товара));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Код_сырья));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Количество_сырья_необходимое_для_производства_данного_товара));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Код_товара, int Код_сырья, int Количество_сырья_необходимое_для_производства_данного_товара, string Единица_измерения) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Код_товара));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Код_сырья));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Количество_сырья_необходимое_для_производства_данного_товара));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Код_товара, int Код_сырья, int Количество_сырья_необходимое_для_производства_данного_товара, string Единица_измерения, int Original_Код_товара, int Original_Код_сырья, int Original_Количество_сырья_необходимое_для_производства_данного_товара, string Original_Единица_измерения) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Код_товара));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Код_сырья));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Количество_сырья_необходимое_для_производства_данного_товара));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_Код_товара));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_Код_сырья));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_Количество_сырья_необходимое_для_производства_данного_товара));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Количество_сырья_необходимое_для_производства_данного_товара, string Единица_измерения, int Original_Код_товара, int Original_Код_сырья, int Original_Количество_сырья_необходимое_для_производства_данного_товара, string Original_Единица_измерения) {
            return this.Update(Original_Код_товара, Original_Код_сырья, Количество_сырья_необходимое_для_производства_данного_товара, Единица_измерения, Original_Код_товара, Original_Код_сырья, Original_Количество_сырья_необходимое_для_производства_данного_товара, Original_Единица_измерения);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Операции_по_готовой_продукцииTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Операции_по_готовой_продукцииTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Операции по готовой продукции";
            tableMapping.ColumnMappings.Add("Номер операции", "Номер операции");
            tableMapping.ColumnMappings.Add("Код товара", "Код товара");
            tableMapping.ColumnMappings.Add("Наименование товара", "Наименование товара");
            tableMapping.ColumnMappings.Add("Статус", "Статус");
            tableMapping.ColumnMappings.Add("Дата", "Дата");
            tableMapping.ColumnMappings.Add("Количество", "Количество");
            tableMapping.ColumnMappings.Add("Единица измерения", "Единица измерения");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Операции по готовой продукции] WHERE (([Номер операции] = @Original_Номер_операции) AND ([Код товара] = @Original_Код_товара) AND ([Наименование товара] = @Original_Наименование_товара) AND ([Статус] = @Original_Статус) AND ([Дата] = @Original_Дата) AND ([Количество] = @Original_Количество) AND ([Единица измерения] = @Original_Единица_измерения))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер операции", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Операции по готовой продукции] ([Номер операции], [Код товара], [Наименование товара], [Статус], [Дата], [Количество], [Единица измерения]) VALUES (@Номер_операции, @Код_товара, @Наименование_товара, @Статус, @Дата, @Количество, @Единица_измерения);
SELECT [Номер операции], [Код товара], [Наименование товара], Статус, Дата, Количество, [Единица измерения] FROM [Операции по готовой продукции] WHERE ([Номер операции] = @Номер_операции)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер операции", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Операции по готовой продукции] SET [Номер операции] = @Номер_операции, [Код товара] = @Код_товара, [Наименование товара] = @Наименование_товара, [Статус] = @Статус, [Дата] = @Дата, [Количество] = @Количество, [Единица измерения] = @Единица_измерения WHERE (([Номер операции] = @Original_Номер_операции) AND ([Код товара] = @Original_Код_товара) AND ([Наименование товара] = @Original_Наименование_товара) AND ([Статус] = @Original_Статус) AND ([Дата] = @Original_Дата) AND ([Количество] = @Original_Количество) AND ([Единица измерения] = @Original_Единица_измерения));
SELECT [Номер операции], [Код товара], [Наименование товара], Статус, Дата, Количество, [Единица измерения] FROM [Операции по готовой продукции] WHERE ([Номер операции] = @Номер_операции)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер операции", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер операции", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Номер операции], [Код товара], [Наименование товара], Статус, Дата, Колич" +
                "ество, [Единица измерения] FROM dbo.[Операции по готовой продукции]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.Операции_по_готовой_продукцииDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.Операции_по_готовой_продукцииDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.Операции_по_готовой_продукцииDataTable dataTable = new СкладDataSet.Операции_по_готовой_продукцииDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.Операции_по_готовой_продукцииDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Операции по готовой продукции");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Номер_операции, int Original_Код_товара, string Original_Наименование_товара, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Номер_операции));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Код_товара));
            if ((Original_Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_товара");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Наименование_товара));
            }
            if ((Original_Статус == null)) {
                throw new global::System.ArgumentNullException("Original_Статус");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Статус));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_Дата));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Количество));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Номер_операции, int Код_товара, string Наименование_товара, string Статус, System.DateTime Дата, int Количество, string Единица_измерения) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Номер_операции));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Код_товара));
            if ((Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Наименование_товара");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Наименование_товара));
            }
            if ((Статус == null)) {
                throw new global::System.ArgumentNullException("Статус");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Статус));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(Дата));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Количество));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Номер_операции, int Код_товара, string Наименование_товара, string Статус, System.DateTime Дата, int Количество, string Единица_измерения, int Original_Номер_операции, int Original_Код_товара, string Original_Наименование_товара, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Номер_операции));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Код_товара));
            if ((Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Наименование_товара");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Наименование_товара));
            }
            if ((Статус == null)) {
                throw new global::System.ArgumentNullException("Статус");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Статус));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Дата));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Количество));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Единица_измерения));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_Номер_операции));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Код_товара));
            if ((Original_Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_товара");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Наименование_товара));
            }
            if ((Original_Статус == null)) {
                throw new global::System.ArgumentNullException("Original_Статус");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Статус));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_Дата));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_Количество));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Код_товара, string Наименование_товара, string Статус, System.DateTime Дата, int Количество, string Единица_измерения, int Original_Номер_операции, int Original_Код_товара, string Original_Наименование_товара, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            return this.Update(Original_Номер_операции, Код_товара, Наименование_товара, Статус, Дата, Количество, Единица_измерения, Original_Номер_операции, Original_Код_товара, Original_Наименование_товара, Original_Статус, Original_Дата, Original_Количество, Original_Единица_измерения);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Операции_по_складу_ГПTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Операции_по_складу_ГПTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Операции по складу ГП";
            tableMapping.ColumnMappings.Add("Номер_операции", "Номер_операции");
            tableMapping.ColumnMappings.Add("Код_товара", "Код_товара");
            tableMapping.ColumnMappings.Add("Наименование_товара", "Наименование_товара");
            tableMapping.ColumnMappings.Add("Статус", "Статус");
            tableMapping.ColumnMappings.Add("Дата", "Дата");
            tableMapping.ColumnMappings.Add("Количество", "Количество");
            tableMapping.ColumnMappings.Add("Единица_измерения", "Единица_измерения");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Операции по складу ГП] WHERE (([Номер_операции] = @Original_Номер_операции) AND ([Код_товара] = @Original_Код_товара) AND ([Наименование_товара] = @Original_Наименование_товара) AND ([Статус] = @Original_Статус) AND ([Дата] = @Original_Дата) AND ([Количество] = @Original_Количество) AND ([Единица_измерения] = @Original_Единица_измерения))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Операции по складу ГП] ([Номер_операции], [Код_товара], [Наименование_товара], [Статус], [Дата], [Количество], [Единица_измерения]) VALUES (@Номер_операции, @Код_товара, @Наименование_товара, @Статус, @Дата, @Количество, @Единица_измерения);
SELECT Номер_операции, Код_товара, Наименование_товара, Статус, Дата, Количество, Единица_измерения FROM [Операции по складу ГП] WHERE (Номер_операции = @Номер_операции)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Операции по складу ГП] SET [Номер_операции] = @Номер_операции, [Код_товара] = @Код_товара, [Наименование_товара] = @Наименование_товара, [Статус] = @Статус, [Дата] = @Дата, [Количество] = @Количество, [Единица_измерения] = @Единица_измерения WHERE (([Номер_операции] = @Original_Номер_операции) AND ([Код_товара] = @Original_Код_товара) AND ([Наименование_товара] = @Original_Наименование_товара) AND ([Статус] = @Original_Статус) AND ([Дата] = @Original_Дата) AND ([Количество] = @Original_Количество) AND ([Единица_измерения] = @Original_Единица_измерения));
SELECT Номер_операции, Код_товара, Наименование_товара, Статус, Дата, Количество, Единица_измерения FROM [Операции по складу ГП] WHERE (Номер_операции = @Номер_операции)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Номер_операции, Код_товара, Наименование_товара, Статус, Дата, Количество," +
                " Единица_измерения FROM dbo.[Операции по складу ГП]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.Операции_по_складу_ГПDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.Операции_по_складу_ГПDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.Операции_по_складу_ГПDataTable dataTable = new СкладDataSet.Операции_по_складу_ГПDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.Операции_по_складу_ГПDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Операции по складу ГП");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Номер_операции, int Original_Код_товара, string Original_Наименование_товара, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Номер_операции));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Код_товара));
            if ((Original_Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_товара");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Наименование_товара));
            }
            if ((Original_Статус == null)) {
                throw new global::System.ArgumentNullException("Original_Статус");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Статус));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_Дата));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Количество));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Номер_операции, int Код_товара, string Наименование_товара, string Статус, System.DateTime Дата, int Количество, string Единица_измерения) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Номер_операции));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Код_товара));
            if ((Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Наименование_товара");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Наименование_товара));
            }
            if ((Статус == null)) {
                throw new global::System.ArgumentNullException("Статус");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Статус));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(Дата));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Количество));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Номер_операции, int Код_товара, string Наименование_товара, string Статус, System.DateTime Дата, int Количество, string Единица_измерения, int Original_Номер_операции, int Original_Код_товара, string Original_Наименование_товара, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Номер_операции));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Код_товара));
            if ((Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Наименование_товара");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Наименование_товара));
            }
            if ((Статус == null)) {
                throw new global::System.ArgumentNullException("Статус");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Статус));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Дата));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Количество));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Единица_измерения));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_Номер_операции));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Код_товара));
            if ((Original_Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_товара");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Наименование_товара));
            }
            if ((Original_Статус == null)) {
                throw new global::System.ArgumentNullException("Original_Статус");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Статус));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_Дата));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_Количество));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Код_товара, string Наименование_товара, string Статус, System.DateTime Дата, int Количество, string Единица_измерения, int Original_Номер_операции, int Original_Код_товара, string Original_Наименование_товара, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            return this.Update(Original_Номер_операции, Код_товара, Наименование_товара, Статус, Дата, Количество, Единица_измерения, Original_Номер_операции, Original_Код_товара, Original_Наименование_товара, Original_Статус, Original_Дата, Original_Количество, Original_Единица_измерения);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Операции_по_складу_СиМTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Операции_по_складу_СиМTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Операции по складу СиМ";
            tableMapping.ColumnMappings.Add("Номер_операции", "Номер_операции");
            tableMapping.ColumnMappings.Add("Код_сырья", "Код_сырья");
            tableMapping.ColumnMappings.Add("Наименование_сырья", "Наименование_сырья");
            tableMapping.ColumnMappings.Add("Статус", "Статус");
            tableMapping.ColumnMappings.Add("Дата", "Дата");
            tableMapping.ColumnMappings.Add("Количество", "Количество");
            tableMapping.ColumnMappings.Add("Единица_измерения", "Единица_измерения");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Операции по складу СиМ] WHERE (([Номер_операции] = @Original_Номер_операции) AND ([Код_сырья] = @Original_Код_сырья) AND ([Наименование_сырья] = @Original_Наименование_сырья) AND ([Статус] = @Original_Статус) AND ([Дата] = @Original_Дата) AND ([Количество] = @Original_Количество) AND ([Единица_измерения] = @Original_Единица_измерения))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Операции по складу СиМ] ([Номер_операции], [Код_сырья], [Наименование_сырья], [Статус], [Дата], [Количество], [Единица_измерения]) VALUES (@Номер_операции, @Код_сырья, @Наименование_сырья, @Статус, @Дата, @Количество, @Единица_измерения);
SELECT Номер_операции, Код_сырья, Наименование_сырья, Статус, Дата, Количество, Единица_измерения FROM [Операции по складу СиМ] WHERE (Номер_операции = @Номер_операции)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Операции по складу СиМ] SET [Номер_операции] = @Номер_операции, [Код_сырья] = @Код_сырья, [Наименование_сырья] = @Наименование_сырья, [Статус] = @Статус, [Дата] = @Дата, [Количество] = @Количество, [Единица_измерения] = @Единица_измерения WHERE (([Номер_операции] = @Original_Номер_операции) AND ([Код_сырья] = @Original_Код_сырья) AND ([Наименование_сырья] = @Original_Наименование_сырья) AND ([Статус] = @Original_Статус) AND ([Дата] = @Original_Дата) AND ([Количество] = @Original_Количество) AND ([Единица_измерения] = @Original_Единица_измерения));
SELECT Номер_операции, Код_сырья, Наименование_сырья, Статус, Дата, Количество, Единица_измерения FROM [Операции по складу СиМ] WHERE (Номер_операции = @Номер_операции)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Номер_операции, Код_сырья, Наименование_сырья, Статус, Дата, Количество, Е" +
                "диница_измерения FROM dbo.[Операции по складу СиМ]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.Операции_по_складу_СиМDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.Операции_по_складу_СиМDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.Операции_по_складу_СиМDataTable dataTable = new СкладDataSet.Операции_по_складу_СиМDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.Операции_по_складу_СиМDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Операции по складу СиМ");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Номер_операции, int Original_Код_сырья, string Original_Наименование_сырья, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Номер_операции));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Код_сырья));
            if ((Original_Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_сырья");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Наименование_сырья));
            }
            if ((Original_Статус == null)) {
                throw new global::System.ArgumentNullException("Original_Статус");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Статус));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_Дата));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Количество));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Номер_операции, int Код_сырья, string Наименование_сырья, string Статус, System.DateTime Дата, int Количество, string Единица_измерения) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Номер_операции));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Код_сырья));
            if ((Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Наименование_сырья");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Наименование_сырья));
            }
            if ((Статус == null)) {
                throw new global::System.ArgumentNullException("Статус");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Статус));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(Дата));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Количество));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Номер_операции, int Код_сырья, string Наименование_сырья, string Статус, System.DateTime Дата, int Количество, string Единица_измерения, int Original_Номер_операции, int Original_Код_сырья, string Original_Наименование_сырья, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Номер_операции));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Код_сырья));
            if ((Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Наименование_сырья");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Наименование_сырья));
            }
            if ((Статус == null)) {
                throw new global::System.ArgumentNullException("Статус");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Статус));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Дата));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Количество));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Единица_измерения));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_Номер_операции));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Код_сырья));
            if ((Original_Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_сырья");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Наименование_сырья));
            }
            if ((Original_Статус == null)) {
                throw new global::System.ArgumentNullException("Original_Статус");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Статус));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_Дата));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_Количество));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Код_сырья, string Наименование_сырья, string Статус, System.DateTime Дата, int Количество, string Единица_измерения, int Original_Номер_операции, int Original_Код_сырья, string Original_Наименование_сырья, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            return this.Update(Original_Номер_операции, Код_сырья, Наименование_сырья, Статус, Дата, Количество, Единица_измерения, Original_Номер_операции, Original_Код_сырья, Original_Наименование_сырья, Original_Статус, Original_Дата, Original_Количество, Original_Единица_измерения);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Операции_по_цехуTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Операции_по_цехуTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Операции по цеху";
            tableMapping.ColumnMappings.Add("Номер_операции", "Номер_операции");
            tableMapping.ColumnMappings.Add("Код_сырья", "Код_сырья");
            tableMapping.ColumnMappings.Add("Наименование_сырья", "Наименование_сырья");
            tableMapping.ColumnMappings.Add("Статус", "Статус");
            tableMapping.ColumnMappings.Add("Дата", "Дата");
            tableMapping.ColumnMappings.Add("Количество", "Количество");
            tableMapping.ColumnMappings.Add("Единица_измерения", "Единица_измерения");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Операции по цеху] WHERE (([Номер_операции] = @Original_Номер_операции) AND ([Код_сырья] = @Original_Код_сырья) AND ([Наименование_сырья] = @Original_Наименование_сырья) AND ([Статус] = @Original_Статус) AND ([Дата] = @Original_Дата) AND ([Количество] = @Original_Количество) AND ([Единица_измерения] = @Original_Единица_измерения))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Операции по цеху] ([Номер_операции], [Код_сырья], [Наименование_сырья], [Статус], [Дата], [Количество], [Единица_измерения]) VALUES (@Номер_операции, @Код_сырья, @Наименование_сырья, @Статус, @Дата, @Количество, @Единица_измерения);
SELECT Номер_операции, Код_сырья, Наименование_сырья, Статус, Дата, Количество, Единица_измерения FROM [Операции по цеху] WHERE (Номер_операции = @Номер_операции)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Операции по цеху] SET [Номер_операции] = @Номер_операции, [Код_сырья] = @Код_сырья, [Наименование_сырья] = @Наименование_сырья, [Статус] = @Статус, [Дата] = @Дата, [Количество] = @Количество, [Единица_измерения] = @Единица_измерения WHERE (([Номер_операции] = @Original_Номер_операции) AND ([Код_сырья] = @Original_Код_сырья) AND ([Наименование_сырья] = @Original_Наименование_сырья) AND ([Статус] = @Original_Статус) AND ([Дата] = @Original_Дата) AND ([Количество] = @Original_Количество) AND ([Единица_измерения] = @Original_Единица_измерения));
SELECT Номер_операции, Код_сырья, Наименование_сырья, Статус, Дата, Количество, Единица_измерения FROM [Операции по цеху] WHERE (Номер_операции = @Номер_операции)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_операции", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_операции", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Статус", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Статус", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Номер_операции, Код_сырья, Наименование_сырья, Статус, Дата, Количество, Е" +
                "диница_измерения FROM dbo.[Операции по цеху]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.Операции_по_цехуDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.Операции_по_цехуDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.Операции_по_цехуDataTable dataTable = new СкладDataSet.Операции_по_цехуDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.Операции_по_цехуDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Операции по цеху");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Номер_операции, int Original_Код_сырья, string Original_Наименование_сырья, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Номер_операции));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Код_сырья));
            if ((Original_Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_сырья");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Наименование_сырья));
            }
            if ((Original_Статус == null)) {
                throw new global::System.ArgumentNullException("Original_Статус");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Статус));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_Дата));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Количество));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Номер_операции, int Код_сырья, string Наименование_сырья, string Статус, System.DateTime Дата, int Количество, string Единица_измерения) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Номер_операции));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Код_сырья));
            if ((Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Наименование_сырья");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Наименование_сырья));
            }
            if ((Статус == null)) {
                throw new global::System.ArgumentNullException("Статус");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Статус));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(Дата));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Количество));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Номер_операции, int Код_сырья, string Наименование_сырья, string Статус, System.DateTime Дата, int Количество, string Единица_измерения, int Original_Номер_операции, int Original_Код_сырья, string Original_Наименование_сырья, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Номер_операции));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Код_сырья));
            if ((Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Наименование_сырья");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Наименование_сырья));
            }
            if ((Статус == null)) {
                throw new global::System.ArgumentNullException("Статус");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Статус));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Дата));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Количество));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Единица_измерения));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_Номер_операции));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Код_сырья));
            if ((Original_Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_сырья");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Наименование_сырья));
            }
            if ((Original_Статус == null)) {
                throw new global::System.ArgumentNullException("Original_Статус");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Статус));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_Дата));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_Количество));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Код_сырья, string Наименование_сырья, string Статус, System.DateTime Дата, int Количество, string Единица_измерения, int Original_Номер_операции, int Original_Код_сырья, string Original_Наименование_сырья, string Original_Статус, System.DateTime Original_Дата, int Original_Количество, string Original_Единица_измерения) {
            return this.Update(Original_Номер_операции, Код_сырья, Наименование_сырья, Статус, Дата, Количество, Единица_измерения, Original_Номер_операции, Original_Код_сырья, Original_Наименование_сырья, Original_Статус, Original_Дата, Original_Количество, Original_Единица_измерения);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Поставщик_СиМTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Поставщик_СиМTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Поставщик СиМ";
            tableMapping.ColumnMappings.Add("Код_поставщика", "Код_поставщика");
            tableMapping.ColumnMappings.Add("Наименование_организации", "Наименование_организации");
            tableMapping.ColumnMappings.Add("Код_сырья", "Код_сырья");
            tableMapping.ColumnMappings.Add("Наименование_сырья", "Наименование_сырья");
            tableMapping.ColumnMappings.Add("Стоимость", "Стоимость");
            tableMapping.ColumnMappings.Add("Единица_измерения", "Единица_измерения");
            tableMapping.ColumnMappings.Add("Адрес_организации", "Адрес_организации");
            tableMapping.ColumnMappings.Add("Телефон", "Телефон");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Поставщик СиМ] WHERE (([Код_поставщика] = @Original_Код_поставщика) AND ([Наименование_организации] = @Original_Наименование_организации) AND ([Код_сырья] = @Original_Код_сырья) AND ([Наименование_сырья] = @Original_Наименование_сырья) AND ([Стоимость] = @Original_Стоимость) AND ([Единица_измерения] = @Original_Единица_измерения) AND ([Адрес_организации] = @Original_Адрес_организации) AND ([Телефон] = @Original_Телефон))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_поставщика", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_поставщика", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_организации", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_организации", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Стоимость", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Адрес_организации", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес_организации", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Телефон", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Поставщик СиМ] ([Код_поставщика], [Наименование_организации], [Код_сырья], [Наименование_сырья], [Стоимость], [Единица_измерения], [Адрес_организации], [Телефон]) VALUES (@Код_поставщика, @Наименование_организации, @Код_сырья, @Наименование_сырья, @Стоимость, @Единица_измерения, @Адрес_организации, @Телефон);
SELECT Код_поставщика, Наименование_организации, Код_сырья, Наименование_сырья, Стоимость, Единица_измерения, Адрес_организации, Телефон FROM [Поставщик СиМ] WHERE (Код_поставщика = @Код_поставщика)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_поставщика", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_поставщика", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_организации", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_организации", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Стоимость", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Адрес_организации", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес_организации", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Телефон", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Поставщик СиМ] SET [Код_поставщика] = @Код_поставщика, [Наименование_организации] = @Наименование_организации, [Код_сырья] = @Код_сырья, [Наименование_сырья] = @Наименование_сырья, [Стоимость] = @Стоимость, [Единица_измерения] = @Единица_измерения, [Адрес_организации] = @Адрес_организации, [Телефон] = @Телефон WHERE (([Код_поставщика] = @Original_Код_поставщика) AND ([Наименование_организации] = @Original_Наименование_организации) AND ([Код_сырья] = @Original_Код_сырья) AND ([Наименование_сырья] = @Original_Наименование_сырья) AND ([Стоимость] = @Original_Стоимость) AND ([Единица_измерения] = @Original_Единица_измерения) AND ([Адрес_организации] = @Original_Адрес_организации) AND ([Телефон] = @Original_Телефон));
SELECT Код_поставщика, Наименование_организации, Код_сырья, Наименование_сырья, Стоимость, Единица_измерения, Адрес_организации, Телефон FROM [Поставщик СиМ] WHERE (Код_поставщика = @Код_поставщика)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_поставщика", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_поставщика", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_организации", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_организации", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Стоимость", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Адрес_организации", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес_организации", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Телефон", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_поставщика", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_поставщика", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_организации", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_организации", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Стоимость", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Адрес_организации", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес_организации", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Телефон", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Код_поставщика, Наименование_организации, Код_сырья, Наименование_сырья, С" +
                "тоимость, Единица_измерения, Адрес_организации, Телефон FROM dbo.[Поставщик СиМ]" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.Поставщик_СиМDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.Поставщик_СиМDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.Поставщик_СиМDataTable dataTable = new СкладDataSet.Поставщик_СиМDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.Поставщик_СиМDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Поставщик СиМ");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Код_поставщика, string Original_Наименование_организации, int Original_Код_сырья, string Original_Наименование_сырья, decimal Original_Стоимость, string Original_Единица_измерения, string Original_Адрес_организации, string Original_Телефон) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Код_поставщика));
            if ((Original_Наименование_организации == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_организации");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Наименование_организации));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Код_сырья));
            if ((Original_Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_сырья");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Наименование_сырья));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_Стоимость));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Единица_измерения));
            }
            if ((Original_Адрес_организации == null)) {
                throw new global::System.ArgumentNullException("Original_Адрес_организации");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Адрес_организации));
            }
            if ((Original_Телефон == null)) {
                throw new global::System.ArgumentNullException("Original_Телефон");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Телефон));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Код_поставщика, string Наименование_организации, int Код_сырья, string Наименование_сырья, decimal Стоимость, string Единица_измерения, string Адрес_организации, string Телефон) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Код_поставщика));
            if ((Наименование_организации == null)) {
                throw new global::System.ArgumentNullException("Наименование_организации");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Наименование_организации));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Код_сырья));
            if ((Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Наименование_сырья");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Наименование_сырья));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(Стоимость));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Единица_измерения));
            }
            if ((Адрес_организации == null)) {
                throw new global::System.ArgumentNullException("Адрес_организации");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Адрес_организации));
            }
            if ((Телефон == null)) {
                throw new global::System.ArgumentNullException("Телефон");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Телефон));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int Код_поставщика, 
                    string Наименование_организации, 
                    int Код_сырья, 
                    string Наименование_сырья, 
                    decimal Стоимость, 
                    string Единица_измерения, 
                    string Адрес_организации, 
                    string Телефон, 
                    int Original_Код_поставщика, 
                    string Original_Наименование_организации, 
                    int Original_Код_сырья, 
                    string Original_Наименование_сырья, 
                    decimal Original_Стоимость, 
                    string Original_Единица_измерения, 
                    string Original_Адрес_организации, 
                    string Original_Телефон) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Код_поставщика));
            if ((Наименование_организации == null)) {
                throw new global::System.ArgumentNullException("Наименование_организации");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Наименование_организации));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Код_сырья));
            if ((Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Наименование_сырья");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Наименование_сырья));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Стоимость));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Единица_измерения));
            }
            if ((Адрес_организации == null)) {
                throw new global::System.ArgumentNullException("Адрес_организации");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Адрес_организации));
            }
            if ((Телефон == null)) {
                throw new global::System.ArgumentNullException("Телефон");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Телефон));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Код_поставщика));
            if ((Original_Наименование_организации == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_организации");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Наименование_организации));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Код_сырья));
            if ((Original_Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_сырья");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Наименование_сырья));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_Стоимость));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Единица_измерения));
            }
            if ((Original_Адрес_организации == null)) {
                throw new global::System.ArgumentNullException("Original_Адрес_организации");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Адрес_организации));
            }
            if ((Original_Телефон == null)) {
                throw new global::System.ArgumentNullException("Original_Телефон");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Телефон));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Наименование_организации, int Код_сырья, string Наименование_сырья, decimal Стоимость, string Единица_измерения, string Адрес_организации, string Телефон, int Original_Код_поставщика, string Original_Наименование_организации, int Original_Код_сырья, string Original_Наименование_сырья, decimal Original_Стоимость, string Original_Единица_измерения, string Original_Адрес_организации, string Original_Телефон) {
            return this.Update(Original_Код_поставщика, Наименование_организации, Код_сырья, Наименование_сырья, Стоимость, Единица_измерения, Адрес_организации, Телефон, Original_Код_поставщика, Original_Наименование_организации, Original_Код_сырья, Original_Наименование_сырья, Original_Стоимость, Original_Единица_измерения, Original_Адрес_организации, Original_Телефон);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Склад_ГПTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Склад_ГПTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Склад ГП";
            tableMapping.ColumnMappings.Add("Код_товара", "Код_товара");
            tableMapping.ColumnMappings.Add("Наименование_товара", "Наименование_товара");
            tableMapping.ColumnMappings.Add("Количество_на_складе", "Количество_на_складе");
            tableMapping.ColumnMappings.Add("Единица_измерения", "Единица_измерения");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Склад ГП] WHERE (([Код_товара] = @Original_Код_товара) AND ([Н" +
                "аименование_товара] = @Original_Наименование_товара) AND ([Количество_на_складе]" +
                " = @Original_Количество_на_складе) AND ([Единица_измерения] = @Original_Единица_" +
                "измерения))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_на_складе", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_на_складе", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Склад ГП] ([Код_товара], [Наименование_товара], [Количество_на_складе], [Единица_измерения]) VALUES (@Код_товара, @Наименование_товара, @Количество_на_складе, @Единица_измерения);
SELECT Код_товара, Наименование_товара, Количество_на_складе, Единица_измерения FROM [Склад ГП] WHERE (Код_товара = @Код_товара)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_на_складе", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_на_складе", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Склад ГП] SET [Код_товара] = @Код_товара, [Наименование_товара] = @Наименование_товара, [Количество_на_складе] = @Количество_на_складе, [Единица_измерения] = @Единица_измерения WHERE (([Код_товара] = @Original_Код_товара) AND ([Наименование_товара] = @Original_Наименование_товара) AND ([Количество_на_складе] = @Original_Количество_на_складе) AND ([Единица_измерения] = @Original_Единица_измерения));
SELECT Код_товара, Наименование_товара, Количество_на_складе, Единица_измерения FROM [Склад ГП] WHERE (Код_товара = @Код_товара)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_на_складе", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_на_складе", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_товара", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_товара", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_товара", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_на_складе", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_на_складе", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Код_товара, Наименование_товара, Количество_на_складе, Единица_измерения F" +
                "ROM dbo.[Склад ГП]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.Склад_ГПDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.Склад_ГПDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.Склад_ГПDataTable dataTable = new СкладDataSet.Склад_ГПDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.Склад_ГПDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Склад ГП");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Код_товара, string Original_Наименование_товара, int Original_Количество_на_складе, string Original_Единица_измерения) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Код_товара));
            if ((Original_Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_товара");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Наименование_товара));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Количество_на_складе));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Код_товара, string Наименование_товара, int Количество_на_складе, string Единица_измерения) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Код_товара));
            if ((Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Наименование_товара");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Наименование_товара));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Количество_на_складе));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Код_товара, string Наименование_товара, int Количество_на_складе, string Единица_измерения, int Original_Код_товара, string Original_Наименование_товара, int Original_Количество_на_складе, string Original_Единица_измерения) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Код_товара));
            if ((Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Наименование_товара");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Наименование_товара));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Количество_на_складе));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_Код_товара));
            if ((Original_Наименование_товара == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_товара");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Наименование_товара));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_Количество_на_складе));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Наименование_товара, int Количество_на_складе, string Единица_измерения, int Original_Код_товара, string Original_Наименование_товара, int Original_Количество_на_складе, string Original_Единица_измерения) {
            return this.Update(Original_Код_товара, Наименование_товара, Количество_на_складе, Единица_измерения, Original_Код_товара, Original_Наименование_товара, Original_Количество_на_складе, Original_Единица_измерения);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Склад_СиМTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public Склад_СиМTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Склад СиМ";
            tableMapping.ColumnMappings.Add("Код_сырья", "Код_сырья");
            tableMapping.ColumnMappings.Add("Наименование_сырья", "Наименование_сырья");
            tableMapping.ColumnMappings.Add("Количество_на_складе", "Количество_на_складе");
            tableMapping.ColumnMappings.Add("Единица_измерения", "Единица_измерения");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Склад СиМ] WHERE (([Код_сырья] = @Original_Код_сырья) AND ([На" +
                "именование_сырья] = @Original_Наименование_сырья) AND ([Количество_на_складе] = " +
                "@Original_Количество_на_складе) AND ([Единица_измерения] = @Original_Единица_изм" +
                "ерения))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_на_складе", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_на_складе", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Склад СиМ] ([Код_сырья], [Наименование_сырья], [Количество_на_складе], [Единица_измерения]) VALUES (@Код_сырья, @Наименование_сырья, @Количество_на_складе, @Единица_измерения);
SELECT Код_сырья, Наименование_сырья, Количество_на_складе, Единица_измерения FROM [Склад СиМ] WHERE (Код_сырья = @Код_сырья)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_на_складе", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_на_складе", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Склад СиМ] SET [Код_сырья] = @Код_сырья, [Наименование_сырья] = @Наименование_сырья, [Количество_на_складе] = @Количество_на_складе, [Единица_измерения] = @Единица_измерения WHERE (([Код_сырья] = @Original_Код_сырья) AND ([Наименование_сырья] = @Original_Наименование_сырья) AND ([Количество_на_складе] = @Original_Количество_на_складе) AND ([Единица_измерения] = @Original_Единица_измерения));
SELECT Код_сырья, Наименование_сырья, Количество_на_складе, Единица_измерения FROM [Склад СиМ] WHERE (Код_сырья = @Код_сырья)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_на_складе", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_на_складе", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование_сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_на_складе", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество_на_складе", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица_измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Код_сырья, Наименование_сырья, Количество_на_складе, Единица_измерения FRO" +
                "M dbo.[Склад СиМ]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.Склад_СиМDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.Склад_СиМDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.Склад_СиМDataTable dataTable = new СкладDataSet.Склад_СиМDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.Склад_СиМDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Склад СиМ");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Код_сырья, string Original_Наименование_сырья, int Original_Количество_на_складе, string Original_Единица_измерения) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Код_сырья));
            if ((Original_Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_сырья");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Наименование_сырья));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Количество_на_складе));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Код_сырья, string Наименование_сырья, int Количество_на_складе, string Единица_измерения) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Код_сырья));
            if ((Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Наименование_сырья");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Наименование_сырья));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Количество_на_складе));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Код_сырья, string Наименование_сырья, int Количество_на_складе, string Единица_измерения, int Original_Код_сырья, string Original_Наименование_сырья, int Original_Количество_на_складе, string Original_Единица_измерения) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Код_сырья));
            if ((Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Наименование_сырья");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Наименование_сырья));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Количество_на_складе));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_Код_сырья));
            if ((Original_Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_сырья");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Наименование_сырья));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_Количество_на_складе));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Наименование_сырья, int Количество_на_складе, string Единица_измерения, int Original_Код_сырья, string Original_Наименование_сырья, int Original_Количество_на_складе, string Original_Единица_измерения) {
            return this.Update(Original_Код_сырья, Наименование_сырья, Количество_на_складе, Единица_измерения, Original_Код_сырья, Original_Наименование_сырья, Original_Количество_на_складе, Original_Единица_измерения);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ЦехTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public ЦехTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Цех";
            tableMapping.ColumnMappings.Add("Код сырья", "Код сырья");
            tableMapping.ColumnMappings.Add("Наименование сырья", "Наименование сырья");
            tableMapping.ColumnMappings.Add("Количество поступлений", "Количество поступлений");
            tableMapping.ColumnMappings.Add("Единица измерения", "Единица измерения");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Цех] WHERE (([Код сырья] = @Original_Код_сырья) AND ([Наименов" +
                "ание сырья] = @Original_Наименование_сырья) AND ([Количество поступлений] = @Ori" +
                "ginal_Количество_поступлений) AND ([Единица измерения] = @Original_Единица_измер" +
                "ения))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_поступлений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество поступлений", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Цех] ([Код сырья], [Наименование сырья], [Количество поступлений], [Единица измерения]) VALUES (@Код_сырья, @Наименование_сырья, @Количество_поступлений, @Единица_измерения);
SELECT [Код сырья], [Наименование сырья], [Количество поступлений], [Единица измерения] FROM Цех WHERE ([Код сырья] = @Код_сырья)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_поступлений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество поступлений", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Цех] SET [Код сырья] = @Код_сырья, [Наименование сырья] = @Наименование_сырья, [Количество поступлений] = @Количество_поступлений, [Единица измерения] = @Единица_измерения WHERE (([Код сырья] = @Original_Код_сырья) AND ([Наименование сырья] = @Original_Наименование_сырья) AND ([Количество поступлений] = @Original_Количество_поступлений) AND ([Единица измерения] = @Original_Единица_измерения));
SELECT [Код сырья], [Наименование сырья], [Количество поступлений], [Единица измерения] FROM Цех WHERE ([Код сырья] = @Код_сырья)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование сырья", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_поступлений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество поступлений", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_сырья", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование_сырья", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование сырья", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_поступлений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество поступлений", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Единица_измерения", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Единица измерения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Storage.Properties.Settings.Default.СкладConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Код сырья], [Наименование сырья], [Количество поступлений], [Единица изме" +
                "рения] FROM dbo.Цех";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(СкладDataSet.ЦехDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual СкладDataSet.ЦехDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            СкладDataSet.ЦехDataTable dataTable = new СкладDataSet.ЦехDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet.ЦехDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(СкладDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Цех");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Код_сырья, string Original_Наименование_сырья, int Original_Количество_поступлений, string Original_Единица_измерения) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Код_сырья));
            if ((Original_Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_сырья");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Наименование_сырья));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Количество_поступлений));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Код_сырья, string Наименование_сырья, int Количество_поступлений, string Единица_измерения) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Код_сырья));
            if ((Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Наименование_сырья");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Наименование_сырья));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Количество_поступлений));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Код_сырья, string Наименование_сырья, int Количество_поступлений, string Единица_измерения, int Original_Код_сырья, string Original_Наименование_сырья, int Original_Количество_поступлений, string Original_Единица_измерения) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Код_сырья));
            if ((Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Наименование_сырья");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Наименование_сырья));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Количество_поступлений));
            if ((Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Единица_измерения));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_Код_сырья));
            if ((Original_Наименование_сырья == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование_сырья");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Наименование_сырья));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_Количество_поступлений));
            if ((Original_Единица_измерения == null)) {
                throw new global::System.ArgumentNullException("Original_Единица_измерения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Единица_измерения));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Наименование_сырья, int Количество_поступлений, string Единица_измерения, int Original_Код_сырья, string Original_Наименование_сырья, int Original_Количество_поступлений, string Original_Единица_измерения) {
            return this.Update(Original_Код_сырья, Наименование_сырья, Количество_поступлений, Единица_измерения, Original_Код_сырья, Original_Наименование_сырья, Original_Количество_поступлений, Original_Единица_измерения);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private Готовая_продукцияTableAdapter _готовая_продукцияTableAdapter;
        
        private Заказчик_ГПTableAdapter _заказчик_ГПTableAdapter;
        
        private Информация_по_товарамTableAdapter _информация_по_товарамTableAdapter;
        
        private Операции_по_готовой_продукцииTableAdapter _операции_по_готовой_продукцииTableAdapter;
        
        private Операции_по_складу_ГПTableAdapter _операции_по_складу_ГПTableAdapter;
        
        private Операции_по_складу_СиМTableAdapter _операции_по_складу_СиМTableAdapter;
        
        private Операции_по_цехуTableAdapter _операции_по_цехуTableAdapter;
        
        private Поставщик_СиМTableAdapter _поставщик_СиМTableAdapter;
        
        private Склад_ГПTableAdapter _склад_ГПTableAdapter;
        
        private Склад_СиМTableAdapter _склад_СиМTableAdapter;
        
        private ЦехTableAdapter _цехTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Готовая_продукцияTableAdapter Готовая_продукцияTableAdapter {
            get {
                return this._готовая_продукцияTableAdapter;
            }
            set {
                this._готовая_продукцияTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Заказчик_ГПTableAdapter Заказчик_ГПTableAdapter {
            get {
                return this._заказчик_ГПTableAdapter;
            }
            set {
                this._заказчик_ГПTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Информация_по_товарамTableAdapter Информация_по_товарамTableAdapter {
            get {
                return this._информация_по_товарамTableAdapter;
            }
            set {
                this._информация_по_товарамTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Операции_по_готовой_продукцииTableAdapter Операции_по_готовой_продукцииTableAdapter {
            get {
                return this._операции_по_готовой_продукцииTableAdapter;
            }
            set {
                this._операции_по_готовой_продукцииTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Операции_по_складу_ГПTableAdapter Операции_по_складу_ГПTableAdapter {
            get {
                return this._операции_по_складу_ГПTableAdapter;
            }
            set {
                this._операции_по_складу_ГПTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Операции_по_складу_СиМTableAdapter Операции_по_складу_СиМTableAdapter {
            get {
                return this._операции_по_складу_СиМTableAdapter;
            }
            set {
                this._операции_по_складу_СиМTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Операции_по_цехуTableAdapter Операции_по_цехуTableAdapter {
            get {
                return this._операции_по_цехуTableAdapter;
            }
            set {
                this._операции_по_цехуTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Поставщик_СиМTableAdapter Поставщик_СиМTableAdapter {
            get {
                return this._поставщик_СиМTableAdapter;
            }
            set {
                this._поставщик_СиМTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Склад_ГПTableAdapter Склад_ГПTableAdapter {
            get {
                return this._склад_ГПTableAdapter;
            }
            set {
                this._склад_ГПTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Склад_СиМTableAdapter Склад_СиМTableAdapter {
            get {
                return this._склад_СиМTableAdapter;
            }
            set {
                this._склад_СиМTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ЦехTableAdapter ЦехTableAdapter {
            get {
                return this._цехTableAdapter;
            }
            set {
                this._цехTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._готовая_продукцияTableAdapter != null) 
                            && (this._готовая_продукцияTableAdapter.Connection != null))) {
                    return this._готовая_продукцияTableAdapter.Connection;
                }
                if (((this._заказчик_ГПTableAdapter != null) 
                            && (this._заказчик_ГПTableAdapter.Connection != null))) {
                    return this._заказчик_ГПTableAdapter.Connection;
                }
                if (((this._информация_по_товарамTableAdapter != null) 
                            && (this._информация_по_товарамTableAdapter.Connection != null))) {
                    return this._информация_по_товарамTableAdapter.Connection;
                }
                if (((this._операции_по_готовой_продукцииTableAdapter != null) 
                            && (this._операции_по_готовой_продукцииTableAdapter.Connection != null))) {
                    return this._операции_по_готовой_продукцииTableAdapter.Connection;
                }
                if (((this._операции_по_складу_ГПTableAdapter != null) 
                            && (this._операции_по_складу_ГПTableAdapter.Connection != null))) {
                    return this._операции_по_складу_ГПTableAdapter.Connection;
                }
                if (((this._операции_по_складу_СиМTableAdapter != null) 
                            && (this._операции_по_складу_СиМTableAdapter.Connection != null))) {
                    return this._операции_по_складу_СиМTableAdapter.Connection;
                }
                if (((this._операции_по_цехуTableAdapter != null) 
                            && (this._операции_по_цехуTableAdapter.Connection != null))) {
                    return this._операции_по_цехуTableAdapter.Connection;
                }
                if (((this._поставщик_СиМTableAdapter != null) 
                            && (this._поставщик_СиМTableAdapter.Connection != null))) {
                    return this._поставщик_СиМTableAdapter.Connection;
                }
                if (((this._склад_ГПTableAdapter != null) 
                            && (this._склад_ГПTableAdapter.Connection != null))) {
                    return this._склад_ГПTableAdapter.Connection;
                }
                if (((this._склад_СиМTableAdapter != null) 
                            && (this._склад_СиМTableAdapter.Connection != null))) {
                    return this._склад_СиМTableAdapter.Connection;
                }
                if (((this._цехTableAdapter != null) 
                            && (this._цехTableAdapter.Connection != null))) {
                    return this._цехTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._готовая_продукцияTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._заказчик_ГПTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._информация_по_товарамTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._операции_по_готовой_продукцииTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._операции_по_складу_ГПTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._операции_по_складу_СиМTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._операции_по_цехуTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._поставщик_СиМTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._склад_ГПTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._склад_СиМTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._цехTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateUpdatedRows(СкладDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._склад_СиМTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Склад_СиМ.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._склад_СиМTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._цехTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Цех.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._цехTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._готовая_продукцияTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Готовая_продукция.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._готовая_продукцияTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._склад_ГПTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Склад_ГП.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._склад_ГПTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._заказчик_ГПTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Заказчик_ГП.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._заказчик_ГПTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._информация_по_товарамTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Информация_по_товарам.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._информация_по_товарамTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._операции_по_готовой_продукцииTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Операции_по_готовой_продукции.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._операции_по_готовой_продукцииTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._операции_по_складу_ГПTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Операции_по_складу_ГП.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._операции_по_складу_ГПTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._операции_по_складу_СиМTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Операции_по_складу_СиМ.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._операции_по_складу_СиМTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._операции_по_цехуTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Операции_по_цеху.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._операции_по_цехуTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._поставщик_СиМTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Поставщик_СиМ.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._поставщик_СиМTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateInsertedRows(СкладDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._склад_СиМTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Склад_СиМ.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._склад_СиМTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._цехTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Цех.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._цехTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._готовая_продукцияTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Готовая_продукция.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._готовая_продукцияTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._склад_ГПTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Склад_ГП.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._склад_ГПTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._заказчик_ГПTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Заказчик_ГП.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._заказчик_ГПTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._информация_по_товарамTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Информация_по_товарам.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._информация_по_товарамTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._операции_по_готовой_продукцииTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Операции_по_готовой_продукции.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._операции_по_готовой_продукцииTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._операции_по_складу_ГПTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Операции_по_складу_ГП.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._операции_по_складу_ГПTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._операции_по_складу_СиМTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Операции_по_складу_СиМ.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._операции_по_складу_СиМTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._операции_по_цехуTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Операции_по_цеху.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._операции_по_цехуTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._поставщик_СиМTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Поставщик_СиМ.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._поставщик_СиМTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private int UpdateDeletedRows(СкладDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._поставщик_СиМTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Поставщик_СиМ.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._поставщик_СиМTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._операции_по_цехуTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Операции_по_цеху.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._операции_по_цехуTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._операции_по_складу_СиМTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Операции_по_складу_СиМ.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._операции_по_складу_СиМTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._операции_по_складу_ГПTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Операции_по_складу_ГП.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._операции_по_складу_ГПTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._операции_по_готовой_продукцииTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Операции_по_готовой_продукции.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._операции_по_готовой_продукцииTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._информация_по_товарамTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Информация_по_товарам.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._информация_по_товарамTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._заказчик_ГПTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Заказчик_ГП.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._заказчик_ГПTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._склад_ГПTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Склад_ГП.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._склад_ГПTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._готовая_продукцияTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Готовая_продукция.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._готовая_продукцияTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._цехTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Цех.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._цехTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._склад_СиМTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Склад_СиМ.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._склад_СиМTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public virtual int UpdateAll(СкладDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._готовая_продукцияTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._готовая_продукцияTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._заказчик_ГПTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._заказчик_ГПTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._информация_по_товарамTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._информация_по_товарамTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._операции_по_готовой_продукцииTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._операции_по_готовой_продукцииTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._операции_по_складу_ГПTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._операции_по_складу_ГПTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._операции_по_складу_СиМTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._операции_по_складу_СиМTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._операции_по_цехуTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._операции_по_цехуTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._поставщик_СиМTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._поставщик_СиМTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._склад_ГПTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._склад_ГПTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._склад_СиМTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._склад_СиМTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._цехTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._цехTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт" +
                        "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци" +
                        "и или текущее состояние не позволяет начать транзакцию.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._готовая_продукцияTableAdapter != null)) {
                    revertConnections.Add(this._готовая_продукцияTableAdapter, this._готовая_продукцияTableAdapter.Connection);
                    this._готовая_продукцияTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._готовая_продукцияTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._готовая_продукцияTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._готовая_продукцияTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._готовая_продукцияTableAdapter.Adapter);
                    }
                }
                if ((this._заказчик_ГПTableAdapter != null)) {
                    revertConnections.Add(this._заказчик_ГПTableAdapter, this._заказчик_ГПTableAdapter.Connection);
                    this._заказчик_ГПTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._заказчик_ГПTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._заказчик_ГПTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._заказчик_ГПTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._заказчик_ГПTableAdapter.Adapter);
                    }
                }
                if ((this._информация_по_товарамTableAdapter != null)) {
                    revertConnections.Add(this._информация_по_товарамTableAdapter, this._информация_по_товарамTableAdapter.Connection);
                    this._информация_по_товарамTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._информация_по_товарамTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._информация_по_товарамTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._информация_по_товарамTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._информация_по_товарамTableAdapter.Adapter);
                    }
                }
                if ((this._операции_по_готовой_продукцииTableAdapter != null)) {
                    revertConnections.Add(this._операции_по_готовой_продукцииTableAdapter, this._операции_по_готовой_продукцииTableAdapter.Connection);
                    this._операции_по_готовой_продукцииTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._операции_по_готовой_продукцииTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._операции_по_готовой_продукцииTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._операции_по_готовой_продукцииTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._операции_по_готовой_продукцииTableAdapter.Adapter);
                    }
                }
                if ((this._операции_по_складу_ГПTableAdapter != null)) {
                    revertConnections.Add(this._операции_по_складу_ГПTableAdapter, this._операции_по_складу_ГПTableAdapter.Connection);
                    this._операции_по_складу_ГПTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._операции_по_складу_ГПTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._операции_по_складу_ГПTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._операции_по_складу_ГПTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._операции_по_складу_ГПTableAdapter.Adapter);
                    }
                }
                if ((this._операции_по_складу_СиМTableAdapter != null)) {
                    revertConnections.Add(this._операции_по_складу_СиМTableAdapter, this._операции_по_складу_СиМTableAdapter.Connection);
                    this._операции_по_складу_СиМTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._операции_по_складу_СиМTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._операции_по_складу_СиМTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._операции_по_складу_СиМTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._операции_по_складу_СиМTableAdapter.Adapter);
                    }
                }
                if ((this._операции_по_цехуTableAdapter != null)) {
                    revertConnections.Add(this._операции_по_цехуTableAdapter, this._операции_по_цехуTableAdapter.Connection);
                    this._операции_по_цехуTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._операции_по_цехуTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._операции_по_цехуTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._операции_по_цехуTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._операции_по_цехуTableAdapter.Adapter);
                    }
                }
                if ((this._поставщик_СиМTableAdapter != null)) {
                    revertConnections.Add(this._поставщик_СиМTableAdapter, this._поставщик_СиМTableAdapter.Connection);
                    this._поставщик_СиМTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._поставщик_СиМTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._поставщик_СиМTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._поставщик_СиМTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._поставщик_СиМTableAdapter.Adapter);
                    }
                }
                if ((this._склад_ГПTableAdapter != null)) {
                    revertConnections.Add(this._склад_ГПTableAdapter, this._склад_ГПTableAdapter.Connection);
                    this._склад_ГПTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._склад_ГПTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._склад_ГПTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._склад_ГПTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._склад_ГПTableAdapter.Adapter);
                    }
                }
                if ((this._склад_СиМTableAdapter != null)) {
                    revertConnections.Add(this._склад_СиМTableAdapter, this._склад_СиМTableAdapter.Connection);
                    this._склад_СиМTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._склад_СиМTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._склад_СиМTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._склад_СиМTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._склад_СиМTableAdapter.Adapter);
                    }
                }
                if ((this._цехTableAdapter != null)) {
                    revertConnections.Add(this._цехTableAdapter, this._цехTableAdapter.Connection);
                    this._цехTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._цехTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._цехTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._цехTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._цехTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._готовая_продукцияTableAdapter != null)) {
                    this._готовая_продукцияTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._готовая_продукцияTableAdapter]));
                    this._готовая_продукцияTableAdapter.Transaction = null;
                }
                if ((this._заказчик_ГПTableAdapter != null)) {
                    this._заказчик_ГПTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._заказчик_ГПTableAdapter]));
                    this._заказчик_ГПTableAdapter.Transaction = null;
                }
                if ((this._информация_по_товарамTableAdapter != null)) {
                    this._информация_по_товарамTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._информация_по_товарамTableAdapter]));
                    this._информация_по_товарамTableAdapter.Transaction = null;
                }
                if ((this._операции_по_готовой_продукцииTableAdapter != null)) {
                    this._операции_по_готовой_продукцииTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._операции_по_готовой_продукцииTableAdapter]));
                    this._операции_по_готовой_продукцииTableAdapter.Transaction = null;
                }
                if ((this._операции_по_складу_ГПTableAdapter != null)) {
                    this._операции_по_складу_ГПTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._операции_по_складу_ГПTableAdapter]));
                    this._операции_по_складу_ГПTableAdapter.Transaction = null;
                }
                if ((this._операции_по_складу_СиМTableAdapter != null)) {
                    this._операции_по_складу_СиМTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._операции_по_складу_СиМTableAdapter]));
                    this._операции_по_складу_СиМTableAdapter.Transaction = null;
                }
                if ((this._операции_по_цехуTableAdapter != null)) {
                    this._операции_по_цехуTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._операции_по_цехуTableAdapter]));
                    this._операции_по_цехуTableAdapter.Transaction = null;
                }
                if ((this._поставщик_СиМTableAdapter != null)) {
                    this._поставщик_СиМTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._поставщик_СиМTableAdapter]));
                    this._поставщик_СиМTableAdapter.Transaction = null;
                }
                if ((this._склад_ГПTableAdapter != null)) {
                    this._склад_ГПTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._склад_ГПTableAdapter]));
                    this._склад_ГПTableAdapter.Transaction = null;
                }
                if ((this._склад_СиМTableAdapter != null)) {
                    this._склад_СиМTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._склад_СиМTableAdapter]));
                    this._склад_СиМTableAdapter.Transaction = null;
                }
                if ((this._цехTableAdapter != null)) {
                    this._цехTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._цехTableAdapter]));
                    this._цехTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591